b main
run
run
s
s
s
s
s
s
s
q
run
backtrace
run
q
b 80
run
r
n
n
p usr_input
n
p usr_input
n
n
p usr_input
n
n
n
n
n
n
n
n
n
s
s
finish
finish
n
n
n
run
n
n
n
n
n
backtrace
q
run
backtrace
q
run
q
run
q
run
bt
q
run
bt
 try {
        // 假设 _resultQue 是一个 std::queue<string>
        if (!_resultQue.empty()) {
            std::string result = _resultQue.front();
            _resultQue.pop();
            return result;
        }
        return "";
    } catch (const std::bad_alloc& e) {
        std::cerr << "Memory allocation failed in get_result: " << e.what() << std::endl;
        return ""; // 返回一个空字符串以避免崩溃
    } catch (const std::exception& e) {
        std::cerr << "Exception in get_result: " << e.what() << std::endl;
        return "";
    }
q
l  try {
        // 假设 _resultQue 是一个 std::queue<string>
        if (!_resultQue.empty()) {
            std::string result = _resultQue.front();
            _resultQue.pop();
            return result;
        }
        return "";
    } catch (const std::bad_alloc& e) {
        std::cerr << "Memory allocation failed in get_result: " << e.what() << std::endl;
        return ""; // 返回一个空字符串以避免崩溃
    } catch (const std::exception& e) {
        std::cerr << "Exception in get_result: " << e.what() << std::endl;
        return "";
b src/KeyRecommander.cpp:15
r
p _resultQue
l src/KeyRecommander.cpp:15
q
run
n
q
b main
run
q
q
b main
run
finish
finish
run
n
s
bt
q
run
bt
q
run
bt
q
run
bt
q
run
bt
q
run 
bt
q
run
bt
q
q
run
bt
q
