!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ATTRIBUTE_NAME	include/tinyxml2.h	/^        ATTRIBUTE_NAME		            = 0,$/;"	e	enum:tinyxml2::StrPair::Mode
ATTRIBUTE_VALUE	include/tinyxml2.h	/^        ATTRIBUTE_VALUE		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::Mode
ATTRIBUTE_VALUE_LEAVE_ENTITIES	include/tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  = NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::Mode
Accept	src/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment
Accept	src/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration
Accept	src/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument
Accept	src/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement
Accept	src/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText
Accept	src/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown
Add	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  void Add(ClosureInterface* task) {$/;"	f	class:limonp::ThreadPool
Add	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  void Add(ClosureInterface* task) {$/;"	f	class:limonp::ThreadPool
ArgvContext	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  ArgvContext(int argc, const char* const * argv) {$/;"	f	class:limonp::ArgvContext
ArgvContext	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^class ArgvContext {$/;"	c	namespace:limonp
ArgvContext	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  ArgvContext(int argc, const char* const * argv) {$/;"	f	class:limonp::ArgvContext
ArgvContext	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^class ArgvContext {$/;"	c	namespace:limonp
Attribute	src/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement
AutoRelease	include/WebPageQuery.h	/^        AutoRelease(){}$/;"	f	class:WebPageQuery::AutoRelease
AutoRelease	include/WebPageQuery.h	/^    class AutoRelease$/;"	c	class:WebPageQuery
B	include/simhash/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon1
B	include/simhash/deps/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon3
BIN_DIR	Makefile	/^BIN_DIR = bin$/;"	m
BITS_LENGTH	include/simhash/Simhasher.hpp	/^            enum{BITS_LENGTH = 64};$/;"	e	enum:simhash::Simhasher::__anon5
BLACK	include/simhash/cppjieba/limonp/Colors.hpp	/^  BLACK = 30,$/;"	e	enum:limonp::Color
BLACK	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  BLACK = 30,$/;"	e	enum:limonp::Color
BLUE	include/simhash/cppjieba/limonp/Colors.hpp	/^  BLUE,$/;"	e	enum:limonp::Color
BLUE	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  BLUE,$/;"	e	enum:limonp::Color
BUF_SIZE	include/tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon10
BUF_SIZE	include/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon8
BUF_SIZE	include/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLElement::__anon9
BYTE	include/simhash/cppjieba/limonp/Md5.hpp	/^typedef unsigned char BYTE ;$/;"	t	namespace:limonp
BYTE	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^typedef unsigned char BYTE ;$/;"	t	namespace:limonp
Block	include/tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT
BlockingQueue	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  BlockingQueue()$/;"	f	class:limonp::BlockingQueue
BlockingQueue	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^class BlockingQueue: NonCopyable {$/;"	c	namespace:limonp
BlockingQueue	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  BlockingQueue()$/;"	f	class:limonp::BlockingQueue
BlockingQueue	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^class BlockingQueue: NonCopyable {$/;"	c	namespace:limonp
BoolAttribute	src/tinyxml2.cpp	/^bool XMLElement::BoolAttribute(const char* name, bool defaultValue) const$/;"	f	class:tinyxml2::XMLElement
BoolText	src/tinyxml2.cpp	/^bool XMLElement::BoolText(bool defaultValue) const$/;"	f	class:tinyxml2::XMLElement
BoolValue	include/tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
BoundedBlockingQueue	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  explicit BoundedBlockingQueue(size_t maxSize)$/;"	f	class:limonp::BoundedBlockingQueue
BoundedBlockingQueue	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^class BoundedBlockingQueue : NonCopyable {$/;"	c	namespace:limonp
BoundedBlockingQueue	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  explicit BoundedBlockingQueue(size_t maxSize)$/;"	f	class:limonp::BoundedBlockingQueue
BoundedBlockingQueue	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^class BoundedBlockingQueue : NonCopyable {$/;"	c	namespace:limonp
BoundedQueue	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  explicit BoundedQueue(size_t capacity): capacity_(capacity), circular_buffer_(capacity) {$/;"	f	class:limonp::BoundedQueue
BoundedQueue	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^class BoundedQueue {$/;"	c	namespace:limonp
BoundedQueue	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  explicit BoundedQueue(size_t capacity): capacity_(capacity), circular_buffer_(capacity) {$/;"	f	class:limonp::BoundedQueue
BoundedQueue	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^class BoundedQueue {$/;"	c	namespace:limonp
CARRIAGE_RETURN	src/tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= static_cast<char>(0x0d);			\/\/ CR gets filtered out$/;"	v	file:
CData	include/tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText
CLOSED	include/tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::ElementClosingType
CLOSING	include/tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::ElementClosingType
COLLAPSE_WHITESPACE	include/tinyxml2.h	/^    COLLAPSE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
COMMENT	include/tinyxml2.h	/^        COMMENT							= NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::Mode
CPPJIBEA_HMMSEGMENT_H	include/simhash/cppjieba/HMMSegment.hpp	2;"	d
CPPJIBEA_HMMSEGMENT_H	include/simhash/deps/cppjieba/HMMSegment.hpp	2;"	d
CPPJIEAB_JIEBA_H	include/simhash/cppjieba/Jieba.hpp	2;"	d
CPPJIEAB_JIEBA_H	include/simhash/deps/cppjieba/Jieba.hpp	2;"	d
CPPJIEBA_DICT_TRIE_HPP	include/simhash/cppjieba/DictTrie.hpp	2;"	d
CPPJIEBA_DICT_TRIE_HPP	include/simhash/deps/cppjieba/DictTrie.hpp	2;"	d
CPPJIEBA_FULLSEGMENT_H	include/simhash/cppjieba/FullSegment.hpp	2;"	d
CPPJIEBA_FULLSEGMENT_H	include/simhash/deps/cppjieba/FullSegment.hpp	2;"	d
CPPJIEBA_HMMMODEL_H	include/simhash/cppjieba/HMMModel.hpp	2;"	d
CPPJIEBA_HMMMODEL_H	include/simhash/deps/cppjieba/HMMModel.hpp	2;"	d
CPPJIEBA_KEYWORD_EXTRACTOR_H	include/simhash/cppjieba/KeywordExtractor.hpp	2;"	d
CPPJIEBA_KEYWORD_EXTRACTOR_H	include/simhash/deps/cppjieba/KeywordExtractor.hpp	2;"	d
CPPJIEBA_LEVELSEGMENT_H	include/simhash/cppjieba/LevelSegment.hpp	2;"	d
CPPJIEBA_LEVELSEGMENT_H	include/simhash/deps/cppjieba/LevelSegment.hpp	2;"	d
CPPJIEBA_MIXSEGMENT_H	include/simhash/cppjieba/MixSegment.hpp	2;"	d
CPPJIEBA_MIXSEGMENT_H	include/simhash/deps/cppjieba/MixSegment.hpp	2;"	d
CPPJIEBA_MPSEGMENT_H	include/simhash/cppjieba/MPSegment.hpp	2;"	d
CPPJIEBA_MPSEGMENT_H	include/simhash/deps/cppjieba/MPSegment.hpp	2;"	d
CPPJIEBA_POS_TAGGING_H	include/simhash/cppjieba/PosTagger.hpp	2;"	d
CPPJIEBA_POS_TAGGING_H	include/simhash/deps/cppjieba/PosTagger.hpp	2;"	d
CPPJIEBA_PRE_FILTER_H	include/simhash/cppjieba/PreFilter.hpp	2;"	d
CPPJIEBA_PRE_FILTER_H	include/simhash/deps/cppjieba/PreFilter.hpp	2;"	d
CPPJIEBA_QUERYSEGMENT_H	include/simhash/cppjieba/QuerySegment.hpp	2;"	d
CPPJIEBA_QUERYSEGMENT_H	include/simhash/deps/cppjieba/QuerySegment.hpp	2;"	d
CPPJIEBA_SEGMENTBASE_H	include/simhash/cppjieba/SegmentBase.hpp	2;"	d
CPPJIEBA_SEGMENTBASE_H	include/simhash/deps/cppjieba/SegmentBase.hpp	2;"	d
CPPJIEBA_TRANSCODE_H	include/simhash/cppjieba/TransCode.hpp	6;"	d
CPPJIEBA_TRANSCODE_H	include/simhash/deps/cppjieba/TransCode.hpp	6;"	d
CPPJIEBA_TRIE_HPP	include/simhash/cppjieba/Trie.hpp	2;"	d
CPPJIEBA_TRIE_HPP	include/simhash/deps/cppjieba/Trie.hpp	2;"	d
CR	src/tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CStr	include/tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter
CStrSize	include/tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter
CXX	Makefile	/^CXX = g++ $/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -std=c++11 -Wall -g$/;"	m
CalcDP	include/simhash/cppjieba/MPSegment.hpp	/^  void CalcDP(vector<Dag>& dags) const {$/;"	f	class:cppjieba::MPSegment
CalcDP	include/simhash/deps/cppjieba/MPSegment.hpp	/^  void CalcDP(vector<Dag>& dags) const {$/;"	f	class:cppjieba::MPSegment
CalculateWeight	include/simhash/cppjieba/DictTrie.hpp	/^  void CalculateWeight(vector<DictUnit>& node_infos) const {$/;"	f	class:cppjieba::DictTrie
CalculateWeight	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void CalculateWeight(vector<DictUnit>& node_infos) const {$/;"	f	class:cppjieba::DictTrie
Capacity	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  size_t Capacity() const {$/;"	f	class:limonp::BoundedQueue
Capacity	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  size_t Capacity() const {$/;"	f	class:limonp::BoundedQueue
Capacity	include/tinyxml2.h	/^    size_t Capacity() const {$/;"	f	class:tinyxml2::DynArray
ChildElementCount	src/tinyxml2.cpp	/^int XMLNode::ChildElementCount() const {$/;"	f	class:tinyxml2::XMLNode
ChildElementCount	src/tinyxml2.cpp	/^int XMLNode::ChildElementCount(const char *value) const {$/;"	f	class:tinyxml2::XMLNode
Clear	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  void Clear() {$/;"	f	class:limonp::BoundedQueue
Clear	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  void Clear() {$/;"	f	class:limonp::BoundedQueue
Clear	include/tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::DynArray
Clear	include/tinyxml2.h	/^    void Clear() {$/;"	f	class:tinyxml2::MemPoolT
Clear	src/tinyxml2.cpp	/^void XMLDocument::Clear()$/;"	f	class:tinyxml2::XMLDocument
ClearBuffer	include/tinyxml2.h	/^    void ClearBuffer( bool resetToFirstElement = true ) {$/;"	f	class:tinyxml2::XMLPrinter
ClearError	src/tinyxml2.cpp	/^void XMLDocument::ClearError() {$/;"	f	class:tinyxml2::XMLDocument
Close	include/simhash/cppjieba/limonp/FileLock.hpp	/^  void Close() {$/;"	f	class:limonp::FileLock
Close	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  void Close() {$/;"	f	class:limonp::FileLock
CloseElement	src/tinyxml2.cpp	/^void XMLPrinter::CloseElement( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
ClosingType	include/tinyxml2.h	/^    ElementClosingType ClosingType() const {$/;"	f	class:tinyxml2::XMLElement
Closure0	include/simhash/cppjieba/limonp/Closure.hpp	/^  Closure0(Funct fun) {$/;"	f	class:limonp::Closure0
Closure0	include/simhash/cppjieba/limonp/Closure.hpp	/^class Closure0: public ClosureInterface {$/;"	c	namespace:limonp
Closure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Closure0(Funct fun) {$/;"	f	class:limonp::Closure0
Closure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class Closure0: public ClosureInterface {$/;"	c	namespace:limonp
Closure1	include/simhash/cppjieba/limonp/Closure.hpp	/^  Closure1(Funct fun, Arg1 arg1) {$/;"	f	class:limonp::Closure1
Closure1	include/simhash/cppjieba/limonp/Closure.hpp	/^class Closure1: public ClosureInterface {$/;"	c	namespace:limonp
Closure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Closure1(Funct fun, Arg1 arg1) {$/;"	f	class:limonp::Closure1
Closure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class Closure1: public ClosureInterface {$/;"	c	namespace:limonp
Closure2	include/simhash/cppjieba/limonp/Closure.hpp	/^  Closure2(Funct fun, Arg1 arg1, Arg2 arg2) {$/;"	f	class:limonp::Closure2
Closure2	include/simhash/cppjieba/limonp/Closure.hpp	/^class Closure2: public ClosureInterface {$/;"	c	namespace:limonp
Closure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Closure2(Funct fun, Arg1 arg1, Arg2 arg2) {$/;"	f	class:limonp::Closure2
Closure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class Closure2: public ClosureInterface {$/;"	c	namespace:limonp
Closure3	include/simhash/cppjieba/limonp/Closure.hpp	/^  Closure3(Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	class:limonp::Closure3
Closure3	include/simhash/cppjieba/limonp/Closure.hpp	/^class Closure3: public ClosureInterface {$/;"	c	namespace:limonp
Closure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Closure3(Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	class:limonp::Closure3
Closure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class Closure3: public ClosureInterface {$/;"	c	namespace:limonp
ClosureInterface	include/simhash/cppjieba/limonp/Closure.hpp	/^class ClosureInterface {$/;"	c	namespace:limonp
ClosureInterface	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class ClosureInterface {$/;"	c	namespace:limonp
CollapseWhitespace	src/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair
Color	include/simhash/cppjieba/limonp/Colors.hpp	/^enum Color {$/;"	g	namespace:limonp
Color	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^enum Color {$/;"	g	namespace:limonp
ColorPrintln	include/simhash/cppjieba/limonp/Colors.hpp	/^static void ColorPrintln(enum Color color, const char * fmt, ...) {$/;"	f	namespace:limonp
ColorPrintln	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^static void ColorPrintln(enum Color color, const char * fmt, ...) {$/;"	f	namespace:limonp
CompactMode	include/tinyxml2.h	/^	virtual bool CompactMode( const XMLElement& )	{ return _compactMode; }$/;"	f	class:tinyxml2::XMLPrinter
Compare	include/simhash/cppjieba/KeywordExtractor.hpp	/^  static bool Compare(const pair<string, double>& lhs, const pair<string, double>& rhs) {$/;"	f	class:cppjieba::KeywordExtractor
Compare	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  static bool Compare(const pair<string, double>& lhs, const pair<string, double>& rhs) {$/;"	f	class:cppjieba::KeywordExtractor
CompareByDistance	include/KeyRecommander.h	/^        CompareByDistance(const string& queryWord) : _queryWord(queryWord) {}$/;"	f	struct:KeyRecommander::CompareByDistance
CompareByDistance	include/KeyRecommander.h	/^    struct CompareByDistance$/;"	s	class:KeyRecommander
Condition	include/simhash/cppjieba/limonp/Condition.hpp	/^  explicit Condition(MutexLock& mutex)$/;"	f	class:limonp::Condition
Condition	include/simhash/cppjieba/limonp/Condition.hpp	/^class Condition : NonCopyable {$/;"	c	namespace:limonp
Condition	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  explicit Condition(MutexLock& mutex)$/;"	f	class:limonp::Condition
Condition	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^class Condition : NonCopyable {$/;"	c	namespace:limonp
Config	include/simhash/cppjieba/limonp/Config.hpp	/^  explicit Config(const string& filePath) {$/;"	f	class:limonp::Config
Config	include/simhash/cppjieba/limonp/Config.hpp	/^class Config {$/;"	c	namespace:limonp
Config	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  explicit Config(const string& filePath) {$/;"	f	class:limonp::Config
Config	include/simhash/deps/cppjieba/limonp/Config.hpp	/^class Config {$/;"	c	namespace:limonp
Configuration	include/Configuration.h	/^class Configuration$/;"	c
Configuration	src/Configuration.cpp	/^ Configuration::Configuration(const string &filepath)$/;"	f	class:Configuration
ConvertUTF32ToUTF8	src/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil
CreateAttribute	src/tinyxml2.cpp	/^XMLAttribute* XMLElement::CreateAttribute()$/;"	f	class:tinyxml2::XMLElement
CreateTrie	include/simhash/cppjieba/DictTrie.hpp	/^  void CreateTrie(const vector<DictUnit>& dictUnits) {$/;"	f	class:cppjieba::DictTrie
CreateTrie	include/simhash/cppjieba/Trie.hpp	/^  void CreateTrie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers) {$/;"	f	class:cppjieba::Trie
CreateTrie	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void CreateTrie(const vector<DictUnit>& dictUnits) {$/;"	f	class:cppjieba::DictTrie
CreateTrie	include/simhash/deps/cppjieba/Trie.hpp	/^  void CreateTrie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers) {$/;"	f	class:cppjieba::Trie
CreateUnlinkedNode	include/tinyxml2.h	/^inline NodeType* XMLDocument::CreateUnlinkedNode( MemPoolT<PoolElementSize>& pool )$/;"	f	class:tinyxml2::XMLDocument
CurrentAllocs	include/tinyxml2.h	/^    size_t CurrentAllocs() const {$/;"	f	class:tinyxml2::MemPoolT
Cut	include/simhash/cppjieba/FullSegment.hpp	/^  void Cut(Unicode::const_iterator begin, $/;"	f	class:cppjieba::FullSegment
Cut	include/simhash/cppjieba/FullSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::FullSegment
Cut	include/simhash/cppjieba/HMMSegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res) const {$/;"	f	class:cppjieba::HMMSegment
Cut	include/simhash/cppjieba/HMMSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::HMMSegment
Cut	include/simhash/cppjieba/Jieba.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
Cut	include/simhash/cppjieba/LevelSegment.hpp	/^  bool Cut(const string& sentence, $/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/cppjieba/LevelSegment.hpp	/^  void Cut(Unicode::const_iterator begin,$/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/cppjieba/LevelSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/cppjieba/MPSegment.hpp	/^  void Cut(Unicode::const_iterator begin,$/;"	f	class:cppjieba::MPSegment
Cut	include/simhash/cppjieba/MPSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::MPSegment
Cut	include/simhash/cppjieba/MixSegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res, bool hmm) const {$/;"	f	class:cppjieba::MixSegment
Cut	include/simhash/cppjieba/MixSegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::MixSegment
Cut	include/simhash/cppjieba/QuerySegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res, bool hmm) const {$/;"	f	class:cppjieba::QuerySegment
Cut	include/simhash/cppjieba/QuerySegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::QuerySegment
Cut	include/simhash/deps/cppjieba/FullSegment.hpp	/^  void Cut(Unicode::const_iterator begin, $/;"	f	class:cppjieba::FullSegment
Cut	include/simhash/deps/cppjieba/FullSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::FullSegment
Cut	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res) const {$/;"	f	class:cppjieba::HMMSegment
Cut	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::HMMSegment
Cut	include/simhash/deps/cppjieba/Jieba.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
Cut	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  bool Cut(const string& sentence, $/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  void Cut(Unicode::const_iterator begin,$/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::LevelSegment
Cut	include/simhash/deps/cppjieba/MPSegment.hpp	/^  void Cut(Unicode::const_iterator begin,$/;"	f	class:cppjieba::MPSegment
Cut	include/simhash/deps/cppjieba/MPSegment.hpp	/^  void Cut(const string& sentence, $/;"	f	class:cppjieba::MPSegment
Cut	include/simhash/deps/cppjieba/MixSegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res, bool hmm) const {$/;"	f	class:cppjieba::MixSegment
Cut	include/simhash/deps/cppjieba/MixSegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::MixSegment
Cut	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  void Cut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res, bool hmm) const {$/;"	f	class:cppjieba::QuerySegment
Cut	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  void Cut(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::QuerySegment
CutAll	include/simhash/cppjieba/Jieba.hpp	/^  void CutAll(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutAll	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutAll(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutByDag	include/simhash/cppjieba/MPSegment.hpp	/^  void CutByDag(const vector<Dag>& dags, $/;"	f	class:cppjieba::MPSegment
CutByDag	include/simhash/deps/cppjieba/MPSegment.hpp	/^  void CutByDag(const vector<Dag>& dags, $/;"	f	class:cppjieba::MPSegment
CutForSearch	include/simhash/cppjieba/Jieba.hpp	/^  void CutForSearch(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
CutForSearch	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutForSearch(const string& sentence, vector<string>& words, bool hmm = true) const {$/;"	f	class:cppjieba::Jieba
CutHMM	include/simhash/cppjieba/Jieba.hpp	/^  void CutHMM(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutHMM	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutHMM(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutLevel	include/simhash/cppjieba/Jieba.hpp	/^  void CutLevel(const string& sentence, vector<pair<string, size_t> >& words) const {$/;"	f	class:cppjieba::Jieba
CutLevel	include/simhash/cppjieba/Jieba.hpp	/^  void CutLevel(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutLevel	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutLevel(const string& sentence, vector<pair<string, size_t> >& words) const {$/;"	f	class:cppjieba::Jieba
CutLevel	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutLevel(const string& sentence, vector<string>& words) const {$/;"	f	class:cppjieba::Jieba
CutSmall	include/simhash/cppjieba/Jieba.hpp	/^  void CutSmall(const string& sentence, vector<string>& words, size_t max_word_len) const {$/;"	f	class:cppjieba::Jieba
CutSmall	include/simhash/deps/cppjieba/Jieba.hpp	/^  void CutSmall(const string& sentence, vector<string>& words, size_t max_word_len) const {$/;"	f	class:cppjieba::Jieba
DICT_COLUMN_NUM	include/simhash/cppjieba/DictTrie.hpp	/^const size_t DICT_COLUMN_NUM = 3;$/;"	m	namespace:cppjieba
DICT_COLUMN_NUM	include/simhash/deps/cppjieba/DictTrie.hpp	/^const size_t DICT_COLUMN_NUM = 3;$/;"	m	namespace:cppjieba
DICT_PATH	src/SplitCppJieba.cpp	/^const char* const DICT_PATH = "dict\/jieba.dict.utf8";$/;"	v
DOUBLE_QUOTE	src/tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
Dag	include/simhash/cppjieba/Trie.hpp	/^  Dag():rune(0), pInfo(NULL), weight(0.0), nextPos(0) {$/;"	f	struct:cppjieba::Dag
Dag	include/simhash/cppjieba/Trie.hpp	/^struct Dag {$/;"	s	namespace:cppjieba
Dag	include/simhash/deps/cppjieba/Trie.hpp	/^  Dag():rune(0), pInfo(NULL), weight(0.0), nextPos(0) {$/;"	f	struct:cppjieba::Dag
Dag	include/simhash/deps/cppjieba/Trie.hpp	/^struct Dag {$/;"	s	namespace:cppjieba
Decode	include/simhash/cppjieba/TransCode.hpp	/^inline Unicode Decode(const string& str) {$/;"	f	namespace:cppjieba::TransCode
Decode	include/simhash/cppjieba/TransCode.hpp	/^inline bool Decode(const string& str, Unicode& res) {$/;"	f	namespace:cppjieba::TransCode
Decode	include/simhash/cppjieba/limonp/Md5.hpp	/^  static void Decode( UINT4 *output, unsigned char *input, unsigned int len ) {$/;"	f	class:limonp::MD5
Decode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline Unicode Decode(const string& str) {$/;"	f	namespace:cppjieba::TransCode
Decode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline bool Decode(const string& str, Unicode& res) {$/;"	f	namespace:cppjieba::TransCode
Decode	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  static void Decode( UINT4 *output, unsigned char *input, unsigned int len ) {$/;"	f	class:limonp::MD5
DeepClone	src/tinyxml2.cpp	/^XMLNode* XMLNode::DeepClone(XMLDocument* target) const$/;"	f	class:tinyxml2::XMLNode
DeepCopy	src/tinyxml2.cpp	/^void XMLDocument::DeepCopy(XMLDocument* target) const$/;"	f	class:tinyxml2::XMLDocument
DeleteAttribute	src/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLElement
DeleteAttribute	src/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
DeleteChild	src/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DeleteChildren	src/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode
DeleteNode	include/simhash/cppjieba/Trie.hpp	/^  void DeleteNode(TrieNode* node) {$/;"	f	class:cppjieba::Trie
DeleteNode	include/simhash/deps/cppjieba/Trie.hpp	/^  void DeleteNode(TrieNode* node) {$/;"	f	class:cppjieba::Trie
DeleteNode	src/tinyxml2.cpp	/^\/*static*\/ void XMLNode::DeleteNode( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode
DeleteNode	src/tinyxml2.cpp	/^void XMLDocument::DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument
DepthTracker	include/tinyxml2.h	/^		explicit DepthTracker(XMLDocument * document) {$/;"	f	class:tinyxml2::XMLDocument::DepthTracker
DepthTracker	include/tinyxml2.h	/^	class DepthTracker {$/;"	c	class:tinyxml2::XMLDocument
DictTrie	include/simhash/cppjieba/DictTrie.hpp	/^  DictTrie(const string& dict_path, const string& user_dict_paths = "", UserWordWeightOption user_word_weight_opt = WordWeightMedian) {$/;"	f	class:cppjieba::DictTrie
DictTrie	include/simhash/cppjieba/DictTrie.hpp	/^class DictTrie {$/;"	c	namespace:cppjieba
DictTrie	include/simhash/deps/cppjieba/DictTrie.hpp	/^  DictTrie(const string& dict_path, const string& user_dict_paths = "", UserWordWeightOption user_word_weight_opt = WordWeightMedian) {$/;"	f	class:cppjieba::DictTrie
DictTrie	include/simhash/deps/cppjieba/DictTrie.hpp	/^class DictTrie {$/;"	c	namespace:cppjieba
DictUnit	include/simhash/cppjieba/Trie.hpp	/^struct DictUnit {$/;"	s	namespace:cppjieba
DictUnit	include/simhash/deps/cppjieba/Trie.hpp	/^struct DictUnit {$/;"	s	namespace:cppjieba
Dictionary	include/Dictionary.h	/^class Dictionary$/;"	c
Dictionary	src/Dictionary.cpp	/^ Dictionary::Dictionary()$/;"	f	class:Dictionary
DoubleAttribute	src/tinyxml2.cpp	/^double XMLElement::DoubleAttribute(const char* name, double defaultValue) const$/;"	f	class:tinyxml2::XMLElement
DoubleText	src/tinyxml2.cpp	/^double XMLElement::DoubleText(double defaultValue) const$/;"	f	class:tinyxml2::XMLElement
DoubleValue	include/tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
DynArray	include/tinyxml2.h	/^    DynArray() :$/;"	f	class:tinyxml2::DynArray
DynArray	include/tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
E	include/simhash/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon1
E	include/simhash/deps/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon3
ENTITY_RANGE	include/tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon10
ElementClosingType	include/tinyxml2.h	/^    enum ElementClosingType {$/;"	g	class:tinyxml2::XMLElement
EmitProbMap	include/simhash/cppjieba/HMMModel.hpp	/^typedef unordered_map<Rune, double> EmitProbMap;$/;"	t	namespace:cppjieba
EmitProbMap	include/simhash/deps/cppjieba/HMMModel.hpp	/^typedef unordered_map<Rune, double> EmitProbMap;$/;"	t	namespace:cppjieba
Empty	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BlockingQueue
Empty	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BoundedBlockingQueue
Empty	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BoundedQueue
Empty	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BlockingQueue
Empty	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BoundedBlockingQueue
Empty	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  bool Empty() const {$/;"	f	class:limonp::BoundedQueue
Empty	include/tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray
Empty	include/tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair
Encode	include/simhash/cppjieba/TransCode.hpp	/^inline string Encode(Unicode::const_iterator begin, Unicode::const_iterator end) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/cppjieba/TransCode.hpp	/^inline string Encode(const Unicode& unicode) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/cppjieba/TransCode.hpp	/^inline void Encode(Unicode::const_iterator begin, Unicode::const_iterator end, string& res) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/cppjieba/TransCode.hpp	/^inline void Encode(const Unicode& uni, string& res) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/cppjieba/TransCode.hpp	/^inline void Encode(const vector<Unicode>& input, vector<string>& output) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/cppjieba/limonp/Md5.hpp	/^  static void Encode( unsigned char *output, UINT4 *input, unsigned int len ) {$/;"	f	class:limonp::MD5
Encode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline string Encode(Unicode::const_iterator begin, Unicode::const_iterator end) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline string Encode(const Unicode& unicode) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline void Encode(Unicode::const_iterator begin, Unicode::const_iterator end, string& res) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline void Encode(const Unicode& uni, string& res) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/deps/cppjieba/TransCode.hpp	/^inline void Encode(const vector<Unicode>& input, vector<string>& output) {$/;"	f	namespace:cppjieba::TransCode
Encode	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  static void Encode( unsigned char *output, UINT4 *input, unsigned int len ) {$/;"	f	class:limonp::MD5
EndsWith	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline bool EndsWith(const string& str, const string& suffix) {$/;"	f	namespace:limonp
EndsWith	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline bool EndsWith(const string& str, const string& suffix) {$/;"	f	namespace:limonp
EnsureCapacity	include/tinyxml2.h	/^    void EnsureCapacity( size_t cap ) {$/;"	f	class:tinyxml2::DynArray
Entity	src/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
Error	include/simhash/cppjieba/limonp/FileLock.hpp	/^  string Error() const {$/;"	f	class:limonp::FileLock
Error	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  string Error() const {$/;"	f	class:limonp::FileLock
Error	include/tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorID	include/tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument
ErrorIDToName	src/tinyxml2.cpp	/^\/*static*\/ const char* XMLDocument::ErrorIDToName(XMLError errorID)$/;"	f	class:tinyxml2::XMLDocument
ErrorLineNum	include/tinyxml2.h	/^    int ErrorLineNum() const$/;"	f	class:tinyxml2::XMLDocument
ErrorName	src/tinyxml2.cpp	/^const char* XMLDocument::ErrorName() const$/;"	f	class:tinyxml2::XMLDocument
ErrorStr	src/tinyxml2.cpp	/^const char* XMLDocument::ErrorStr() const$/;"	f	class:tinyxml2::XMLDocument
Extract	include/simhash/cppjieba/KeywordExtractor.hpp	/^  bool Extract(const string& sentence, vector<pair<string, double> >& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	include/simhash/cppjieba/KeywordExtractor.hpp	/^  bool Extract(const string& sentence, vector<string>& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  bool Extract(const string& sentence, vector<pair<string, double> >& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
Extract	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  bool Extract(const string& sentence, vector<string>& keywords, size_t topN) const {$/;"	f	class:cppjieba::KeywordExtractor
F	include/simhash/cppjieba/limonp/Md5.hpp	57;"	d
F	include/simhash/deps/cppjieba/limonp/Md5.hpp	57;"	d
FF	include/simhash/cppjieba/limonp/Md5.hpp	67;"	d
FF	include/simhash/deps/cppjieba/limonp/Md5.hpp	67;"	d
FileLock	include/simhash/cppjieba/limonp/FileLock.hpp	/^  FileLock() : fd_(-1), ok_(true) {$/;"	f	class:limonp::FileLock
FileLock	include/simhash/cppjieba/limonp/FileLock.hpp	/^class FileLock {$/;"	c	namespace:limonp
FileLock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  FileLock() : fd_(-1), ok_(true) {$/;"	f	class:limonp::FileLock
FileLock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^class FileLock {$/;"	c	namespace:limonp
Final	include/simhash/cppjieba/limonp/Md5.hpp	/^  void Final() {$/;"	f	class:limonp::MD5
Final	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  void Final() {$/;"	f	class:limonp::MD5
Find	include/simhash/cppjieba/DictTrie.hpp	/^  const DictUnit* Find(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::DictTrie
Find	include/simhash/cppjieba/DictTrie.hpp	/^  void Find(Unicode::const_iterator begin, $/;"	f	class:cppjieba::DictTrie
Find	include/simhash/cppjieba/Trie.hpp	/^  const DictUnit* Find(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::Trie
Find	include/simhash/cppjieba/Trie.hpp	/^  void Find(Unicode::const_iterator begin, $/;"	f	class:cppjieba::Trie
Find	include/simhash/deps/cppjieba/DictTrie.hpp	/^  const DictUnit* Find(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::DictTrie
Find	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void Find(Unicode::const_iterator begin, $/;"	f	class:cppjieba::DictTrie
Find	include/simhash/deps/cppjieba/Trie.hpp	/^  const DictUnit* Find(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::Trie
Find	include/simhash/deps/cppjieba/Trie.hpp	/^  void Find(Unicode::const_iterator begin, $/;"	f	class:cppjieba::Trie
FindAttribute	src/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement
FindOrCreateAttribute	src/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement
FirstAttribute	include/tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement
FirstChild	include/tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle
FirstChild	include/tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode
FirstChild	include/tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle
FirstChild	include/tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	include/tinyxml2.h	/^    XMLElement* FirstChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
FirstChildElement	include/tinyxml2.h	/^    XMLHandle FirstChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle
FirstChildElement	include/tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
FirstChildElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
FloatAttribute	src/tinyxml2.cpp	/^float XMLElement::FloatAttribute(const char* name, float defaultValue) const$/;"	f	class:tinyxml2::XMLElement
FloatText	src/tinyxml2.cpp	/^float XMLElement::FloatText(float defaultValue) const$/;"	f	class:tinyxml2::XMLElement
FloatValue	include/tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute
Full	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  bool Full() const {$/;"	f	class:limonp::BoundedBlockingQueue
Full	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  bool Full() const {$/;"	f	class:limonp::BoundedQueue
Full	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  bool Full() const {$/;"	f	class:limonp::BoundedBlockingQueue
Full	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  bool Full() const {$/;"	f	class:limonp::BoundedQueue
FullSegment	include/simhash/cppjieba/FullSegment.hpp	/^  FullSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::FullSegment
FullSegment	include/simhash/cppjieba/FullSegment.hpp	/^  FullSegment(const string& dictPath) {$/;"	f	class:cppjieba::FullSegment
FullSegment	include/simhash/cppjieba/FullSegment.hpp	/^class FullSegment: public SegmentBase {$/;"	c	namespace:cppjieba
FullSegment	include/simhash/deps/cppjieba/FullSegment.hpp	/^  FullSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::FullSegment
FullSegment	include/simhash/deps/cppjieba/FullSegment.hpp	/^  FullSegment(const string& dictPath) {$/;"	f	class:cppjieba::FullSegment
FullSegment	include/simhash/deps/cppjieba/FullSegment.hpp	/^class FullSegment: public SegmentBase {$/;"	c	namespace:cppjieba
G	include/simhash/cppjieba/limonp/Md5.hpp	58;"	d
G	include/simhash/deps/cppjieba/limonp/Md5.hpp	58;"	d
GBKTrans	include/simhash/cppjieba/limonp/StringUtil.hpp	/^bool GBKTrans(const char* const str, size_t len, Uint16Container& vec) {$/;"	f	namespace:limonp
GBKTrans	include/simhash/cppjieba/limonp/StringUtil.hpp	/^bool GBKTrans(const string& str, Uint16Container& vec) {$/;"	f	namespace:limonp
GBKTrans	include/simhash/cppjieba/limonp/StringUtil.hpp	/^void GBKTrans(Uint16ContainerConIter begin, Uint16ContainerConIter end, string& res) {$/;"	f	namespace:limonp
GBKTrans	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^bool GBKTrans(const char* const str, size_t len, Uint16Container& vec) {$/;"	f	namespace:limonp
GBKTrans	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^bool GBKTrans(const string& str, Uint16Container& vec) {$/;"	f	namespace:limonp
GBKTrans	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^void GBKTrans(Uint16ContainerConIter begin, Uint16ContainerConIter end, string& res) {$/;"	f	namespace:limonp
GG	include/simhash/cppjieba/limonp/Md5.hpp	72;"	d
GG	include/simhash/deps/cppjieba/limonp/Md5.hpp	72;"	d
GREEN	include/simhash/cppjieba/limonp/Colors.hpp	/^  GREEN,$/;"	e	enum:limonp::Color
GREEN	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  GREEN,$/;"	e	enum:limonp::Color
Get	include/simhash/cppjieba/limonp/Config.hpp	/^  int Get(const string& key, int defaultvalue) const {$/;"	f	class:limonp::Config
Get	include/simhash/cppjieba/limonp/Config.hpp	/^  string Get(const string& key, const string& defaultvalue) const {$/;"	f	class:limonp::Config
Get	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  int Get(const string& key, int defaultvalue) const {$/;"	f	class:limonp::Config
Get	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  string Get(const string& key, const string& defaultvalue) const {$/;"	f	class:limonp::Config
GetCharacterRef	src/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil
GetConfigInfo	include/simhash/cppjieba/limonp/Config.hpp	/^  string GetConfigInfo() const {$/;"	f	class:limonp::Config
GetConfigInfo	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  string GetConfigInfo() const {$/;"	f	class:limonp::Config
GetDictTrie	include/simhash/cppjieba/Jieba.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::Jieba
GetDictTrie	include/simhash/cppjieba/MPSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MPSegment
GetDictTrie	include/simhash/cppjieba/MixSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MixSegment
GetDictTrie	include/simhash/deps/cppjieba/Jieba.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::Jieba
GetDictTrie	include/simhash/deps/cppjieba/MPSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MPSegment
GetDictTrie	include/simhash/deps/cppjieba/MixSegment.hpp	/^  const DictTrie* GetDictTrie() const {$/;"	f	class:cppjieba::MixSegment
GetDocument	include/tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode
GetDocument	include/tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode
GetEmitProb	include/simhash/cppjieba/HMMModel.hpp	/^  double GetEmitProb(const EmitProbMap* ptMp, Rune key, $/;"	f	struct:cppjieba::HMMModel
GetEmitProb	include/simhash/deps/cppjieba/HMMModel.hpp	/^  double GetEmitProb(const EmitProbMap* ptMp, Rune key, $/;"	f	struct:cppjieba::HMMModel
GetHMMModel	include/simhash/cppjieba/Jieba.hpp	/^  const HMMModel* GetHMMModel() const {$/;"	f	class:cppjieba::Jieba
GetHMMModel	include/simhash/deps/cppjieba/Jieba.hpp	/^  const HMMModel* GetHMMModel() const {$/;"	f	class:cppjieba::Jieba
GetLine	include/simhash/cppjieba/HMMModel.hpp	/^  bool GetLine(ifstream& ifile, string& line) {$/;"	f	struct:cppjieba::HMMModel
GetLine	include/simhash/deps/cppjieba/HMMModel.hpp	/^  bool GetLine(ifstream& ifile, string& line) {$/;"	f	struct:cppjieba::HMMModel
GetLineNum	include/tinyxml2.h	/^    int GetLineNum() const { return _parseLineNum; }$/;"	f	class:tinyxml2::XMLAttribute
GetLineNum	include/tinyxml2.h	/^    int GetLineNum() const { return _parseLineNum; }$/;"	f	class:tinyxml2::XMLNode
GetMaxWordLen	include/simhash/cppjieba/QuerySegment.hpp	/^  size_t GetMaxWordLen() const {$/;"	f	class:cppjieba::QuerySegment
GetMaxWordLen	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  size_t GetMaxWordLen() const {$/;"	f	class:cppjieba::QuerySegment
GetMinWeight	include/simhash/cppjieba/DictTrie.hpp	/^  double GetMinWeight() const {$/;"	f	class:cppjieba::DictTrie
GetMinWeight	include/simhash/deps/cppjieba/DictTrie.hpp	/^  double GetMinWeight() const {$/;"	f	class:cppjieba::DictTrie
GetPthreadMutex	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  pthread_mutex_t* GetPthreadMutex() {$/;"	f	class:limonp::MutexLock
GetPthreadMutex	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  pthread_mutex_t* GetPthreadMutex() {$/;"	f	class:limonp::MutexLock
GetStr	src/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair
GetText	src/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement
GetTime	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline void GetTime(const string& format, string&  timeStr) {$/;"	f	namespace:limonp
GetTime	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline void GetTime(const string& format, string&  timeStr) {$/;"	f	namespace:limonp
GetUserData	include/tinyxml2.h	/^	void* GetUserData() const			{ return _userData; }$/;"	f	class:tinyxml2::XMLNode
H	include/simhash/cppjieba/limonp/Md5.hpp	59;"	d
H	include/simhash/deps/cppjieba/limonp/Md5.hpp	59;"	d
HASH_BIG_ENDIAN	include/simhash/jenkins.h	80;"	d
HASH_BIG_ENDIAN	include/simhash/jenkins.h	85;"	d
HASH_BIG_ENDIAN	include/simhash/jenkins.h	88;"	d
HASH_LITTLE_ENDIAN	include/simhash/jenkins.h	79;"	d
HASH_LITTLE_ENDIAN	include/simhash/jenkins.h	84;"	d
HASH_LITTLE_ENDIAN	include/simhash/jenkins.h	87;"	d
HH	include/simhash/cppjieba/limonp/Md5.hpp	77;"	d
HH	include/simhash/deps/cppjieba/limonp/Md5.hpp	77;"	d
HMMModel	include/simhash/cppjieba/HMMModel.hpp	/^  HMMModel(const string& modelPath) {$/;"	f	struct:cppjieba::HMMModel
HMMModel	include/simhash/cppjieba/HMMModel.hpp	/^struct HMMModel {$/;"	s	namespace:cppjieba
HMMModel	include/simhash/deps/cppjieba/HMMModel.hpp	/^  HMMModel(const string& modelPath) {$/;"	f	struct:cppjieba::HMMModel
HMMModel	include/simhash/deps/cppjieba/HMMModel.hpp	/^struct HMMModel {$/;"	s	namespace:cppjieba
HMMSegment	include/simhash/cppjieba/HMMSegment.hpp	/^  HMMSegment(const HMMModel* model) $/;"	f	class:cppjieba::HMMSegment
HMMSegment	include/simhash/cppjieba/HMMSegment.hpp	/^  HMMSegment(const string& filePath)$/;"	f	class:cppjieba::HMMSegment
HMMSegment	include/simhash/cppjieba/HMMSegment.hpp	/^class HMMSegment: public SegmentBase {$/;"	c	namespace:cppjieba
HMMSegment	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  HMMSegment(const HMMModel* model) $/;"	f	class:cppjieba::HMMSegment
HMMSegment	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  HMMSegment(const string& filePath)$/;"	f	class:cppjieba::HMMSegment
HMMSegment	include/simhash/deps/cppjieba/HMMSegment.hpp	/^class HMMSegment: public SegmentBase {$/;"	c	namespace:cppjieba
HMM_PATH	src/SplitCppJieba.cpp	/^const char* const HMM_PATH = "dict\/hmm_model.utf8";$/;"	v
HasBOM	include/tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument
HasKey	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  bool HasKey(const string& key) const {$/;"	f	class:limonp::ArgvContext
HasKey	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  bool HasKey(const string& key) const {$/;"	f	class:limonp::ArgvContext
HasNext	include/simhash/cppjieba/PreFilter.hpp	/^  bool HasNext() const {$/;"	f	class:cppjieba::PreFilter
HasNext	include/simhash/deps/cppjieba/PreFilter.hpp	/^  bool HasNext() const {$/;"	f	class:cppjieba::PreFilter
I	include/simhash/cppjieba/limonp/Md5.hpp	60;"	d
I	include/simhash/deps/cppjieba/limonp/Md5.hpp	60;"	d
IDF_PATH	src/SplitCppJieba.cpp	/^const char* const IDF_PATH = "dict\/idf.utf8";$/;"	v
II	include/simhash/cppjieba/limonp/Md5.hpp	82;"	d
II	include/simhash/deps/cppjieba/limonp/Md5.hpp	82;"	d
INCLUDE_DIR	Makefile	/^INCLUDE_DIR = include$/;"	m
ITEMS_PER_BLOCK	include/tinyxml2.h	/^    enum { ITEMS_PER_BLOCK = (4 * 1024) \/ ITEM_SIZE };$/;"	e	enum:tinyxml2::MemPoolT::__anon7
IThread	include/simhash/cppjieba/limonp/Thread.hpp	/^  IThread(): isStarted(false), isJoined(false) {$/;"	f	class:limonp::IThread
IThread	include/simhash/cppjieba/limonp/Thread.hpp	/^class IThread: NonCopyable {$/;"	c	namespace:limonp
IThread	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  IThread(): isStarted(false), isJoined(false) {$/;"	f	class:limonp::IThread
IThread	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^class IThread: NonCopyable {$/;"	c	namespace:limonp
Identify	src/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node, bool first )$/;"	f	class:tinyxml2::XMLDocument
Init	include/simhash/cppjieba/DictTrie.hpp	/^  void Init(const string& dict_path, const string& user_dict_paths, UserWordWeightOption user_word_weight_opt) {$/;"	f	class:cppjieba::DictTrie
Init	include/simhash/cppjieba/limonp/Md5.hpp	/^  void Init() {$/;"	f	class:limonp::MD5
Init	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void Init(const string& dict_path, const string& user_dict_paths, UserWordWeightOption user_word_weight_opt) {$/;"	f	class:cppjieba::DictTrie
Init	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  void Init() {$/;"	f	class:limonp::MD5
InsertAfterChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertChildPreamble	src/tinyxml2.cpp	/^void XMLNode::InsertChildPreamble( XMLNode* insertThis ) const$/;"	f	class:tinyxml2::XMLNode
InsertEndChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertFirstChild	src/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode
InsertNewChildElement	src/tinyxml2.cpp	/^XMLElement* XMLElement::InsertNewChildElement(const char* name)$/;"	f	class:tinyxml2::XMLElement
InsertNewComment	src/tinyxml2.cpp	/^XMLComment* XMLElement::InsertNewComment(const char* comment)$/;"	f	class:tinyxml2::XMLElement
InsertNewDeclaration	src/tinyxml2.cpp	/^XMLDeclaration* XMLElement::InsertNewDeclaration(const char* text)$/;"	f	class:tinyxml2::XMLElement
InsertNewText	src/tinyxml2.cpp	/^XMLText* XMLElement::InsertNewText(const char* text)$/;"	f	class:tinyxml2::XMLElement
InsertNewUnknown	src/tinyxml2.cpp	/^XMLUnknown* XMLElement::InsertNewUnknown(const char* text)$/;"	f	class:tinyxml2::XMLElement
InsertNode	include/simhash/cppjieba/Trie.hpp	/^  void InsertNode(const Unicode& key, const DictUnit* ptValue) {$/;"	f	class:cppjieba::Trie
InsertNode	include/simhash/deps/cppjieba/Trie.hpp	/^  void InsertNode(const Unicode& key, const DictUnit* ptValue) {$/;"	f	class:cppjieba::Trie
InsertUserWord	include/simhash/cppjieba/DictTrie.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::DictTrie
InsertUserWord	include/simhash/cppjieba/Jieba.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::Jieba
InsertUserWord	include/simhash/deps/cppjieba/DictTrie.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::DictTrie
InsertUserWord	include/simhash/deps/cppjieba/Jieba.hpp	/^  bool InsertUserWord(const string& word, const string& tag = UNKNOWN_TAG) {$/;"	f	class:cppjieba::Jieba
Int64Attribute	src/tinyxml2.cpp	/^int64_t XMLElement::Int64Attribute(const char* name, int64_t defaultValue) const$/;"	f	class:tinyxml2::XMLElement
Int64Text	src/tinyxml2.cpp	/^int64_t XMLElement::Int64Text(int64_t defaultValue) const$/;"	f	class:tinyxml2::XMLElement
Int64Value	include/tinyxml2.h	/^	int64_t Int64Value() const {$/;"	f	class:tinyxml2::XMLAttribute
IntAttribute	src/tinyxml2.cpp	/^int XMLElement::IntAttribute(const char* name, int defaultValue) const$/;"	f	class:tinyxml2::XMLElement
IntText	src/tinyxml2.cpp	/^int XMLElement::IntText(int defaultValue) const$/;"	f	class:tinyxml2::XMLElement
IntValue	include/tinyxml2.h	/^	int	IntValue() const {$/;"	f	class:tinyxml2::XMLAttribute
InternalCut	include/simhash/cppjieba/HMMSegment.hpp	/^  void InternalCut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res) const {$/;"	f	class:cppjieba::HMMSegment
InternalCut	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  void InternalCut(Unicode::const_iterator begin, Unicode::const_iterator end, vector<Unicode>& res) const {$/;"	f	class:cppjieba::HMMSegment
IsAllAscii	include/simhash/cppjieba/QuerySegment.hpp	/^  bool IsAllAscii(const Unicode& s) const {$/;"	f	class:cppjieba::QuerySegment
IsAllAscii	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  bool IsAllAscii(const Unicode& s) const {$/;"	f	class:cppjieba::QuerySegment
IsIn	include/simhash/cppjieba/limonp/StdExtension.hpp	/^bool IsIn(const ContainType& contain, const KeyType& key) {$/;"	f	namespace:std
IsIn	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^bool IsIn(const ContainType& contain, const KeyType& key) {$/;"	f	namespace:std
IsInStr	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline bool IsInStr(const string& str, char ch) {$/;"	f	namespace:limonp
IsInStr	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline bool IsInStr(const string& str, char ch) {$/;"	f	namespace:limonp
IsNameChar	include/tinyxml2.h	/^    inline static bool IsNameChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsNameStartChar	include/tinyxml2.h	/^    inline static bool IsNameStartChar( unsigned char ch ) {$/;"	f	class:tinyxml2::XMLUtil
IsPrefixHex	include/tinyxml2.h	/^    inline static bool IsPrefixHex( const char* p) {$/;"	f	class:tinyxml2::XMLUtil
IsSingleWord	include/simhash/cppjieba/KeywordExtractor.hpp	/^  bool IsSingleWord(const string& str) const {$/;"	f	class:cppjieba::KeywordExtractor
IsSingleWord	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  bool IsSingleWord(const string& str) const {$/;"	f	class:cppjieba::KeywordExtractor
IsSpace	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline bool IsSpace(unsigned c) {$/;"	f	namespace:limonp
IsSpace	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline bool IsSpace(unsigned c) {$/;"	f	namespace:limonp
IsUTF8Continuation	include/tinyxml2.h	/^    inline static bool IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil
IsUserDictSingleChineseWord	include/simhash/cppjieba/DictTrie.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& word) const {$/;"	f	class:cppjieba::DictTrie
IsUserDictSingleChineseWord	include/simhash/cppjieba/MPSegment.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& value) const {$/;"	f	class:cppjieba::MPSegment
IsUserDictSingleChineseWord	include/simhash/deps/cppjieba/DictTrie.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& word) const {$/;"	f	class:cppjieba::DictTrie
IsUserDictSingleChineseWord	include/simhash/deps/cppjieba/MPSegment.hpp	/^  bool IsUserDictSingleChineseWord(const Rune& value) const {$/;"	f	class:cppjieba::MPSegment
IsWhiteSpace	include/tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil
Item	include/tinyxml2.h	/^    union Item {$/;"	u	class:tinyxml2::MemPoolT
Jieba	include/simhash/cppjieba/Jieba.hpp	/^  Jieba(const string& dict_path, const string& model_path, const string& user_dict_path) $/;"	f	class:cppjieba::Jieba
Jieba	include/simhash/cppjieba/Jieba.hpp	/^class Jieba {$/;"	c	namespace:cppjieba
Jieba	include/simhash/deps/cppjieba/Jieba.hpp	/^  Jieba(const string& dict_path, const string& model_path, const string& user_dict_path) $/;"	f	class:cppjieba::Jieba
Jieba	include/simhash/deps/cppjieba/Jieba.hpp	/^class Jieba {$/;"	c	namespace:cppjieba
Join	include/simhash/cppjieba/limonp/StringUtil.hpp	/^string Join(T begin, T end, const string& connector) {$/;"	f	namespace:limonp
Join	include/simhash/cppjieba/limonp/StringUtil.hpp	/^void Join(T begin, T end, string& res, const string& connector) {$/;"	f	namespace:limonp
Join	include/simhash/cppjieba/limonp/Thread.hpp	/^  void Join() {$/;"	f	class:limonp::IThread
Join	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^string Join(T begin, T end, const string& connector) {$/;"	f	namespace:limonp
Join	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^void Join(T begin, T end, string& res, const string& connector) {$/;"	f	namespace:limonp
Join	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  void Join() {$/;"	f	class:limonp::IThread
KeyRecommander	include/KeyRecommander.h	/^class KeyRecommander$/;"	c
KeyRecommander	src/KeyRecommander.cpp	/^KeyRecommander::KeyRecommander(const string word,Dictionary *dict)$/;"	f	class:KeyRecommander
KeywordExtractor	include/simhash/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const DictTrie* dictTrie, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const Jieba& jieba, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const string& dictPath, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/cppjieba/KeywordExtractor.hpp	/^class KeywordExtractor {$/;"	c	namespace:cppjieba
KeywordExtractor	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const DictTrie* dictTrie, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const Jieba& jieba, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  KeywordExtractor(const string& dictPath, $/;"	f	class:cppjieba::KeywordExtractor
KeywordExtractor	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^class KeywordExtractor {$/;"	c	namespace:cppjieba
LDFLAGS	Makefile	/^LDFLAGS = -lwfrest -lmysqlclient$/;"	m
LF	src/tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LIMONP_ARGV_FUNCTS_H	include/simhash/cppjieba/limonp/ArgvContext.hpp	7;"	d
LIMONP_ARGV_FUNCTS_H	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	7;"	d
LIMONP_BLOCKINGQUEUE_HPP	include/simhash/cppjieba/limonp/BlockingQueue.hpp	2;"	d
LIMONP_BLOCKINGQUEUE_HPP	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	2;"	d
LIMONP_BOUNDED_BLOCKING_QUEUE_HPP	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	2;"	d
LIMONP_BOUNDED_BLOCKING_QUEUE_HPP	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	2;"	d
LIMONP_BOUNDED_QUEUE_HPP	include/simhash/cppjieba/limonp/BoundedQueue.hpp	2;"	d
LIMONP_BOUNDED_QUEUE_HPP	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	2;"	d
LIMONP_CLOSURE_HPP	include/simhash/cppjieba/limonp/Closure.hpp	2;"	d
LIMONP_CLOSURE_HPP	include/simhash/deps/cppjieba/limonp/Closure.hpp	2;"	d
LIMONP_COLOR_PRINT_HPP	include/simhash/cppjieba/limonp/Colors.hpp	2;"	d
LIMONP_COLOR_PRINT_HPP	include/simhash/deps/cppjieba/limonp/Colors.hpp	2;"	d
LIMONP_CONDITION_HPP	include/simhash/cppjieba/limonp/Condition.hpp	2;"	d
LIMONP_CONDITION_HPP	include/simhash/deps/cppjieba/limonp/Condition.hpp	2;"	d
LIMONP_CONFIG_H	include/simhash/cppjieba/limonp/Config.hpp	6;"	d
LIMONP_CONFIG_H	include/simhash/deps/cppjieba/limonp/Config.hpp	6;"	d
LIMONP_FILELOCK_HPP	include/simhash/cppjieba/limonp/FileLock.hpp	2;"	d
LIMONP_FILELOCK_HPP	include/simhash/deps/cppjieba/limonp/FileLock.hpp	2;"	d
LIMONP_FORCE_PUBLIC_H	include/simhash/cppjieba/limonp/ForcePublic.hpp	2;"	d
LIMONP_FORCE_PUBLIC_H	include/simhash/deps/cppjieba/limonp/ForcePublic.hpp	2;"	d
LIMONP_LOCAL_VECTOR_HPP	include/simhash/cppjieba/limonp/LocalVector.hpp	2;"	d
LIMONP_LOCAL_VECTOR_HPP	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	2;"	d
LIMONP_LOGGING_HPP	include/simhash/cppjieba/limonp/Logging.hpp	2;"	d
LIMONP_LOGGING_HPP	include/simhash/deps/cppjieba/limonp/Logging.hpp	2;"	d
LIMONP_MUTEX_LOCK_HPP	include/simhash/cppjieba/limonp/MutexLock.hpp	2;"	d
LIMONP_MUTEX_LOCK_HPP	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	2;"	d
LIMONP_NONCOPYABLE_H	include/simhash/cppjieba/limonp/NonCopyable.hpp	4;"	d
LIMONP_NONCOPYABLE_H	include/simhash/deps/cppjieba/limonp/NonCopyable.hpp	4;"	d
LIMONP_STD_EXTEMSION_HPP	include/simhash/cppjieba/limonp/StdExtension.hpp	2;"	d
LIMONP_STD_EXTEMSION_HPP	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	2;"	d
LIMONP_STR_FUNCTS_H	include/simhash/cppjieba/limonp/StringUtil.hpp	6;"	d
LIMONP_STR_FUNCTS_H	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	6;"	d
LIMONP_THREAD_HPP	include/simhash/cppjieba/limonp/Thread.hpp	2;"	d
LIMONP_THREAD_HPP	include/simhash/deps/cppjieba/limonp/Thread.hpp	2;"	d
LIMONP_THREAD_POOL_HPP	include/simhash/cppjieba/limonp/ThreadPool.hpp	2;"	d
LIMONP_THREAD_POOL_HPP	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	2;"	d
LINE_FEED	src/tinyxml2.cpp	/^static const char LINE_FEED				= static_cast<char>(0x0a);			\/\/ all line endings are normalized to LF$/;"	v	file:
LL_DEBUG	include/simhash/cppjieba/limonp/Logging.hpp	/^  LL_DEBUG = 0, $/;"	e	enum:limonp::__anon2
LL_DEBUG	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  LL_DEBUG = 0, $/;"	e	enum:limonp::__anon4
LL_ERROR	include/simhash/cppjieba/limonp/Logging.hpp	/^  LL_ERROR = 3, $/;"	e	enum:limonp::__anon2
LL_ERROR	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  LL_ERROR = 3, $/;"	e	enum:limonp::__anon4
LL_FATAL	include/simhash/cppjieba/limonp/Logging.hpp	/^  LL_FATAL = 4,$/;"	e	enum:limonp::__anon2
LL_FATAL	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  LL_FATAL = 4,$/;"	e	enum:limonp::__anon4
LL_INFO	include/simhash/cppjieba/limonp/Logging.hpp	/^  LL_INFO = 1, $/;"	e	enum:limonp::__anon2
LL_INFO	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  LL_INFO = 1, $/;"	e	enum:limonp::__anon4
LL_WARNING	include/simhash/cppjieba/limonp/Logging.hpp	/^  LL_WARNING = 2, $/;"	e	enum:limonp::__anon2
LL_WARNING	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  LL_WARNING = 2, $/;"	e	enum:limonp::__anon4
LOCAL_VECTOR_BUFFER_SIZE	include/simhash/cppjieba/limonp/LocalVector.hpp	/^const size_t LOCAL_VECTOR_BUFFER_SIZE = 16;$/;"	m	namespace:limonp
LOCAL_VECTOR_BUFFER_SIZE	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^const size_t LOCAL_VECTOR_BUFFER_SIZE = 16;$/;"	m	namespace:limonp
LOG_LEVEL_ARRAY	include/simhash/cppjieba/limonp/Logging.hpp	/^static const char * LOG_LEVEL_ARRAY[] = {"DEBUG","INFO","WARN","ERROR","FATAL"};$/;"	m	namespace:limonp
LOG_LEVEL_ARRAY	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^static const char * LOG_LEVEL_ARRAY[] = {"DEBUG","INFO","WARN","ERROR","FATAL"};$/;"	m	namespace:limonp
LOG_TIME_FORMAT	include/simhash/cppjieba/limonp/Logging.hpp	/^static const char * LOG_TIME_FORMAT = "%Y-%m-%d %H:%M:%S";$/;"	m	namespace:limonp
LOG_TIME_FORMAT	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^static const char * LOG_TIME_FORMAT = "%Y-%m-%d %H:%M:%S";$/;"	m	namespace:limonp
LTrim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& LTrim(std::string & s, char x) {$/;"	f	namespace:limonp
LTrim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& LTrim(std::string &s) {$/;"	f	namespace:limonp
LTrim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& LTrim(std::string & s, char x) {$/;"	f	namespace:limonp
LTrim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& LTrim(std::string &s) {$/;"	f	namespace:limonp
LastChild	include/tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle
LastChild	include/tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode
LastChild	include/tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle
LastChild	include/tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	include/tinyxml2.h	/^    XMLElement* LastChildElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
LastChildElement	include/tinyxml2.h	/^    XMLHandle LastChildElement( const char* name = 0 )						{$/;"	f	class:tinyxml2::XMLHandle
LastChildElement	include/tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* name = 0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle
LastChildElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
LevelSegment	include/simhash/cppjieba/LevelSegment.hpp	/^  LevelSegment(const DictTrie* dictTrie) $/;"	f	class:cppjieba::LevelSegment
LevelSegment	include/simhash/cppjieba/LevelSegment.hpp	/^  LevelSegment(const string& dictPath, $/;"	f	class:cppjieba::LevelSegment
LevelSegment	include/simhash/cppjieba/LevelSegment.hpp	/^class LevelSegment: public SegmentBase{$/;"	c	namespace:cppjieba
LevelSegment	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  LevelSegment(const DictTrie* dictTrie) $/;"	f	class:cppjieba::LevelSegment
LevelSegment	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  LevelSegment(const string& dictPath, $/;"	f	class:cppjieba::LevelSegment
LevelSegment	include/simhash/deps/cppjieba/LevelSegment.hpp	/^class LevelSegment: public SegmentBase{$/;"	c	namespace:cppjieba
LinkEndChild	include/tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode
LoadDict	include/simhash/cppjieba/DictTrie.hpp	/^  void LoadDict(const string& filePath) {$/;"	f	class:cppjieba::DictTrie
LoadDict	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void LoadDict(const string& filePath) {$/;"	f	class:cppjieba::DictTrie
LoadEmitProb	include/simhash/cppjieba/HMMModel.hpp	/^  bool LoadEmitProb(const string& line, EmitProbMap& mp) {$/;"	f	struct:cppjieba::HMMModel
LoadEmitProb	include/simhash/deps/cppjieba/HMMModel.hpp	/^  bool LoadEmitProb(const string& line, EmitProbMap& mp) {$/;"	f	struct:cppjieba::HMMModel
LoadFile	include/simhash/cppjieba/limonp/Config.hpp	/^  void LoadFile(const string& filePath) {$/;"	f	class:limonp::Config
LoadFile	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  void LoadFile(const string& filePath) {$/;"	f	class:limonp::Config
LoadFile	src/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument
LoadFile	src/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument
LoadIdfDict	include/simhash/cppjieba/KeywordExtractor.hpp	/^  void LoadIdfDict(const string& idfPath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadIdfDict	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  void LoadIdfDict(const string& idfPath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadModel	include/simhash/cppjieba/HMMModel.hpp	/^  void LoadModel(const string& filePath) {$/;"	f	struct:cppjieba::HMMModel
LoadModel	include/simhash/deps/cppjieba/HMMModel.hpp	/^  void LoadModel(const string& filePath) {$/;"	f	struct:cppjieba::HMMModel
LoadSpecialSymbols	include/simhash/cppjieba/SegmentBase.hpp	/^  void LoadSpecialSymbols() {$/;"	f	class:cppjieba::SegmentBase
LoadSpecialSymbols	include/simhash/deps/cppjieba/SegmentBase.hpp	/^  void LoadSpecialSymbols() {$/;"	f	class:cppjieba::SegmentBase
LoadStopWordDict	include/simhash/cppjieba/KeywordExtractor.hpp	/^  void LoadStopWordDict(const string& filePath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadStopWordDict	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  void LoadStopWordDict(const string& filePath) {$/;"	f	class:cppjieba::KeywordExtractor
LoadUserDict	include/simhash/cppjieba/DictTrie.hpp	/^  void LoadUserDict(const string& filePaths) {$/;"	f	class:cppjieba::DictTrie
LoadUserDict	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void LoadUserDict(const string& filePaths) {$/;"	f	class:cppjieba::DictTrie
LocWord	include/simhash/cppjieba/Jieba.hpp	/^  struct LocWord {$/;"	s	class:cppjieba::Jieba
LocWord	include/simhash/deps/cppjieba/Jieba.hpp	/^  struct LocWord {$/;"	s	class:cppjieba::Jieba
LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  LocalVector() {$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(const LocalVector<T>& vec) {$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(const_iterator  begin, const_iterator end) { \/\/ TODO: make it faster$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(size_t size, const T& t) { \/\/ TODO: make it faster$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^class LocalVector {$/;"	c	namespace:limonp
LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  LocalVector() {$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(const LocalVector<T>& vec) {$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(const_iterator  begin, const_iterator end) { \/\/ TODO: make it faster$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  LocalVector(size_t size, const T& t) { \/\/ TODO: make it faster$/;"	f	class:limonp::LocalVector
LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^class LocalVector {$/;"	c	namespace:limonp
Locate	include/simhash/cppjieba/Jieba.hpp	/^  void Locate(const vector<string>& words, vector<LocWord>& loc_words) const {$/;"	f	class:cppjieba::Jieba
Locate	include/simhash/deps/cppjieba/Jieba.hpp	/^  void Locate(const vector<string>& words, vector<LocWord>& loc_words) const {$/;"	f	class:cppjieba::Jieba
Lock	include/simhash/cppjieba/limonp/FileLock.hpp	/^  void Lock() {$/;"	f	class:limonp::FileLock
Lock	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  void Lock() {$/;"	f	class:limonp::MutexLock
Lock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  void Lock() {$/;"	f	class:limonp::FileLock
Lock	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  void Lock() {$/;"	f	class:limonp::MutexLock
LockOrUnlock	include/simhash/cppjieba/limonp/FileLock.hpp	/^  static int LockOrUnlock(int fd, bool lock) {$/;"	f	class:limonp::FileLock
LockOrUnlock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  static int LockOrUnlock(int fd, bool lock) {$/;"	f	class:limonp::FileLock
Logger	include/simhash/cppjieba/limonp/Logging.hpp	/^  Logger(size_t level, const char* filename, int lineno)$/;"	f	class:limonp::Logger
Logger	include/simhash/cppjieba/limonp/Logging.hpp	/^class Logger {$/;"	c	namespace:limonp
Logger	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  Logger(size_t level, const char* filename, int lineno)$/;"	f	class:limonp::Logger
Logger	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^class Logger {$/;"	c	namespace:limonp
Lower	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline string& Lower(string& str) {$/;"	f	namespace:limonp
Lower	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline string& Lower(string& str) {$/;"	f	namespace:limonp
M	include/simhash/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon1
M	include/simhash/deps/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon3
MAX_DOUBLE	include/simhash/cppjieba/DictTrie.hpp	/^const double MAX_DOUBLE = 3.14e+100;$/;"	m	namespace:cppjieba
MAX_DOUBLE	include/simhash/deps/cppjieba/DictTrie.hpp	/^const double MAX_DOUBLE = 3.14e+100;$/;"	m	namespace:cppjieba
MAX_WORD_LENGTH	include/simhash/cppjieba/Trie.hpp	/^const size_t MAX_WORD_LENGTH = 512;$/;"	m	namespace:cppjieba
MAX_WORD_LENGTH	include/simhash/deps/cppjieba/Trie.hpp	/^const size_t MAX_WORD_LENGTH = 512;$/;"	m	namespace:cppjieba
MD5	include/simhash/cppjieba/limonp/Md5.hpp	/^  MD5() {$/;"	f	class:limonp::MD5
MD5	include/simhash/cppjieba/limonp/Md5.hpp	/^class MD5 {$/;"	c	namespace:limonp
MD5	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  MD5() {$/;"	f	class:limonp::MD5
MD5	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^class MD5 {$/;"	c	namespace:limonp
MD5Transform	include/simhash/cppjieba/limonp/Md5.hpp	/^  static void MD5Transform( UINT4 state[4], unsigned char block[64] ) {$/;"	f	class:limonp::MD5
MD5Transform	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  static void MD5Transform( UINT4 state[4], unsigned char block[64] ) {$/;"	f	class:limonp::MD5
MIN_DOUBLE	include/simhash/cppjieba/DictTrie.hpp	/^const double MIN_DOUBLE = -3.14e+100;$/;"	m	namespace:cppjieba
MIN_DOUBLE	include/simhash/deps/cppjieba/DictTrie.hpp	/^const double MIN_DOUBLE = -3.14e+100;$/;"	m	namespace:cppjieba
MPSegment	include/simhash/cppjieba/MPSegment.hpp	/^  MPSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::MPSegment
MPSegment	include/simhash/cppjieba/MPSegment.hpp	/^  MPSegment(const string& dictPath, const string& userDictPath = "")$/;"	f	class:cppjieba::MPSegment
MPSegment	include/simhash/cppjieba/MPSegment.hpp	/^class MPSegment: public SegmentBase {$/;"	c	namespace:cppjieba
MPSegment	include/simhash/deps/cppjieba/MPSegment.hpp	/^  MPSegment(const DictTrie* dictTrie)$/;"	f	class:cppjieba::MPSegment
MPSegment	include/simhash/deps/cppjieba/MPSegment.hpp	/^  MPSegment(const string& dictPath, const string& userDictPath = "")$/;"	f	class:cppjieba::MPSegment
MPSegment	include/simhash/deps/cppjieba/MPSegment.hpp	/^class MPSegment: public SegmentBase {$/;"	c	namespace:cppjieba
MakeNodeInfo	include/simhash/cppjieba/DictTrie.hpp	/^  bool MakeNodeInfo(DictUnit& node_info,$/;"	f	class:cppjieba::DictTrie
MakeNodeInfo	include/simhash/deps/cppjieba/DictTrie.hpp	/^  bool MakeNodeInfo(DictUnit& node_info,$/;"	f	class:cppjieba::DictTrie
MarkInUse	src/tinyxml2.cpp	/^void XMLDocument::MarkInUse(const XMLNode* const node)$/;"	f	class:tinyxml2::XMLDocument
Mem	include/tinyxml2.h	/^    T* Mem() {$/;"	f	class:tinyxml2::DynArray
Mem	include/tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray
MemPool	include/tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool
MemPool	include/tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	include/tinyxml2.h	/^    MemPoolT() : _blockPtrs(), _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT
MemPoolT	include/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2
MixSegment	include/simhash/cppjieba/MixSegment.hpp	/^  MixSegment(const DictTrie* dictTrie, const HMMModel* model) $/;"	f	class:cppjieba::MixSegment
MixSegment	include/simhash/cppjieba/MixSegment.hpp	/^  MixSegment(const string& mpSegDict, const string& hmmSegDict, $/;"	f	class:cppjieba::MixSegment
MixSegment	include/simhash/cppjieba/MixSegment.hpp	/^class MixSegment: public SegmentBase {$/;"	c	namespace:cppjieba
MixSegment	include/simhash/deps/cppjieba/MixSegment.hpp	/^  MixSegment(const DictTrie* dictTrie, const HMMModel* model) $/;"	f	class:cppjieba::MixSegment
MixSegment	include/simhash/deps/cppjieba/MixSegment.hpp	/^  MixSegment(const string& mpSegDict, const string& hmmSegDict, $/;"	f	class:cppjieba::MixSegment
MixSegment	include/simhash/deps/cppjieba/MixSegment.hpp	/^class MixSegment: public SegmentBase {$/;"	c	namespace:cppjieba
Mode	include/tinyxml2.h	/^    enum Mode {$/;"	g	class:tinyxml2::StrPair
MutexLock	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  MutexLock() {$/;"	f	class:limonp::MutexLock
MutexLock	include/simhash/cppjieba/limonp/MutexLock.hpp	/^class MutexLock: NonCopyable {$/;"	c	namespace:limonp
MutexLock	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  MutexLock() {$/;"	f	class:limonp::MutexLock
MutexLock	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^class MutexLock: NonCopyable {$/;"	c	namespace:limonp
MutexLockGuard	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  explicit MutexLockGuard(MutexLock & mutex)$/;"	f	class:limonp::MutexLockGuard
MutexLockGuard	include/simhash/cppjieba/limonp/MutexLock.hpp	/^class MutexLockGuard: NonCopyable {$/;"	c	namespace:limonp
MutexLockGuard	include/simhash/cppjieba/limonp/MutexLock.hpp	47;"	d
MutexLockGuard	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  explicit MutexLockGuard(MutexLock & mutex)$/;"	f	class:limonp::MutexLockGuard
MutexLockGuard	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^class MutexLockGuard: NonCopyable {$/;"	c	namespace:limonp
MutexLockGuard	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	47;"	d
Mysql	include/Mysql.h	/^class Mysql$/;"	c
Mysql	src/Mysql.cpp	/^ Mysql::Mysql() {$/;"	f	class:Mysql
NEEDS_DELETE	include/tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon6
NEEDS_ENTITY_PROCESSING	include/tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::Mode
NEEDS_FLUSH	include/tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon6
NEEDS_NEWLINE_NORMALIZATION	include/tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::Mode
NEEDS_WHITESPACE_COLLAPSING	include/tinyxml2.h	/^        NEEDS_WHITESPACE_COLLAPSING     = 0x04,$/;"	e	enum:tinyxml2::StrPair::Mode
NUM_ENTITIES	src/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	include/tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement
Name	src/tinyxml2.cpp	/^const char* XMLAttribute::Name() const$/;"	f	class:tinyxml2::XMLAttribute
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)()) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1), Arg1 arg1) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)()) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1), Arg1 arg1) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2) {$/;"	f	namespace:limonp
NewClosure	include/simhash/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)()) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1), Arg1 arg1) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(Obj* obj, R (Obj::* fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)()) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1), Arg1 arg1) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1, Arg2), Arg1 arg1, Arg2 arg2) {$/;"	f	namespace:limonp
NewClosure	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^ClosureInterface* NewClosure(R (*fun)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	namespace:limonp
NewComment	src/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewDeclaration	src/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewElement	src/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument
NewText	src/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument
NewUnknown	src/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument
Next	include/simhash/cppjieba/PreFilter.hpp	/^  Range Next() {$/;"	f	class:cppjieba::PreFilter
Next	include/simhash/deps/cppjieba/PreFilter.hpp	/^  Range Next() {$/;"	f	class:cppjieba::PreFilter
Next	include/tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute
NextMap	include/simhash/cppjieba/Trie.hpp	/^  typedef unordered_map<TrieKey, TrieNode*> NextMap;$/;"	t	class:cppjieba::TrieNode
NextMap	include/simhash/deps/cppjieba/Trie.hpp	/^  typedef unordered_map<TrieKey, TrieNode*> NextMap;$/;"	t	class:cppjieba::TrieNode
NextSibling	include/tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle
NextSibling	include/tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode
NextSibling	include/tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle
NextSibling	include/tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	include/tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* name = 0 )	{$/;"	f	class:tinyxml2::XMLNode
NextSiblingElement	include/tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* name = 0 )					{$/;"	f	class:tinyxml2::XMLHandle
NextSiblingElement	include/tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* name = 0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle
NextSiblingElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
NoChildren	include/tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode
NonCopyable	include/simhash/cppjieba/limonp/NonCopyable.hpp	/^  NonCopyable() {$/;"	f	class:limonp::NonCopyable
NonCopyable	include/simhash/cppjieba/limonp/NonCopyable.hpp	/^class NonCopyable {$/;"	c	namespace:limonp
NonCopyable	include/simhash/deps/cppjieba/limonp/NonCopyable.hpp	/^  NonCopyable() {$/;"	f	class:limonp::NonCopyable
NonCopyable	include/simhash/deps/cppjieba/limonp/NonCopyable.hpp	/^class NonCopyable {$/;"	c	namespace:limonp
Notify	include/simhash/cppjieba/limonp/Condition.hpp	/^  void Notify() {$/;"	f	class:limonp::Condition
Notify	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  void Notify() {$/;"	f	class:limonp::Condition
NotifyAll	include/simhash/cppjieba/limonp/Condition.hpp	/^  void NotifyAll() {$/;"	f	class:limonp::Condition
NotifyAll	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  void NotifyAll() {$/;"	f	class:limonp::Condition
NumbersRule	include/simhash/cppjieba/HMMSegment.hpp	/^  Unicode::const_iterator NumbersRule(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
NumbersRule	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  Unicode::const_iterator NumbersRule(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
OBJS	Makefile	/^OBJS = $(patsubst $(SRC_DIR)\/%.cpp,$(BIN_DIR)\/%.o,$(SRCS))$/;"	m
OPEN	include/tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::ElementClosingType
ObjClosure0	include/simhash/cppjieba/limonp/Closure.hpp	/^  ObjClosure0(Obj* p, Funct fun) {$/;"	f	class:limonp::ObjClosure0
ObjClosure0	include/simhash/cppjieba/limonp/Closure.hpp	/^class ObjClosure0: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  ObjClosure0(Obj* p, Funct fun) {$/;"	f	class:limonp::ObjClosure0
ObjClosure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class ObjClosure0: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure1	include/simhash/cppjieba/limonp/Closure.hpp	/^  ObjClosure1(Obj* p, Funct fun, Arg1 arg1) {$/;"	f	class:limonp::ObjClosure1
ObjClosure1	include/simhash/cppjieba/limonp/Closure.hpp	/^class ObjClosure1: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  ObjClosure1(Obj* p, Funct fun, Arg1 arg1) {$/;"	f	class:limonp::ObjClosure1
ObjClosure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class ObjClosure1: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure2	include/simhash/cppjieba/limonp/Closure.hpp	/^  ObjClosure2(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2) {$/;"	f	class:limonp::ObjClosure2
ObjClosure2	include/simhash/cppjieba/limonp/Closure.hpp	/^class ObjClosure2: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  ObjClosure2(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2) {$/;"	f	class:limonp::ObjClosure2
ObjClosure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class ObjClosure2: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure3	include/simhash/cppjieba/limonp/Closure.hpp	/^  ObjClosure3(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	class:limonp::ObjClosure3
ObjClosure3	include/simhash/cppjieba/limonp/Closure.hpp	/^class ObjClosure3: public ClosureInterface {$/;"	c	namespace:limonp
ObjClosure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  ObjClosure3(Obj* p, Funct fun, Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	class:limonp::ObjClosure3
ObjClosure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^class ObjClosure3: public ClosureInterface {$/;"	c	namespace:limonp
Ok	include/simhash/cppjieba/limonp/FileLock.hpp	/^  bool Ok() const {$/;"	f	class:limonp::FileLock
Ok	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  bool Ok() const {$/;"	f	class:limonp::FileLock
Open	include/simhash/cppjieba/limonp/FileLock.hpp	/^  void Open(const string& fname) {$/;"	f	class:limonp::FileLock
Open	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  void Open(const string& fname) {$/;"	f	class:limonp::FileLock
OpenElement	src/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name, bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
PADDING	include/simhash/cppjieba/limonp/Md5.hpp	/^static unsigned char PADDING[64] = {$/;"	m	namespace:limonp
PADDING	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^static unsigned char PADDING[64] = {$/;"	m	namespace:limonp
PEDANTIC_WHITESPACE	include/tinyxml2.h	/^    PEDANTIC_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
POINTER	include/simhash/cppjieba/limonp/Md5.hpp	/^typedef unsigned char *POINTER;$/;"	t	namespace:limonp
POINTER	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^typedef unsigned char *POINTER;$/;"	t	namespace:limonp
POS_ENG	include/simhash/cppjieba/PosTagger.hpp	/^static const char* const POS_ENG = "eng";$/;"	m	namespace:cppjieba
POS_ENG	include/simhash/deps/cppjieba/PosTagger.hpp	/^static const char* const POS_ENG = "eng";$/;"	m	namespace:cppjieba
POS_M	include/simhash/cppjieba/PosTagger.hpp	/^static const char* const POS_M = "m";$/;"	m	namespace:cppjieba
POS_M	include/simhash/deps/cppjieba/PosTagger.hpp	/^static const char* const POS_M = "m";$/;"	m	namespace:cppjieba
POS_X	include/simhash/cppjieba/PosTagger.hpp	/^static const char* const POS_X = "x";$/;"	m	namespace:cppjieba
POS_X	include/simhash/deps/cppjieba/PosTagger.hpp	/^static const char* const POS_X = "x";$/;"	m	namespace:cppjieba
PRESERVE_WHITESPACE	include/tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
PURPLE	include/simhash/cppjieba/limonp/Colors.hpp	/^  PURPLE$/;"	e	enum:limonp::Color
PURPLE	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  PURPLE$/;"	e	enum:limonp::Color
Parent	include/tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode
Parent	include/tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode
Parse	src/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* xml, size_t nBytes )$/;"	f	class:tinyxml2::XMLDocument
Parse	src/tinyxml2.cpp	/^void XMLDocument::Parse()$/;"	f	class:tinyxml2::XMLDocument
ParseAttributes	src/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	src/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLAttribute
ParseDeep	src/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair*, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLComment
ParseDeep	src/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair*, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLDeclaration
ParseDeep	src/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLElement
ParseDeep	src/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLNode
ParseDeep	src/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair*, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLText
ParseDeep	src/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair*, int* curLineNumPtr )$/;"	f	class:tinyxml2::XMLUnknown
ParseName	src/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair
ParseText	src/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags, int* curLineNumPtr )$/;"	f	class:tinyxml2::StrPair
PathJoin	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline string PathJoin(const string& path1, const string& path2) {$/;"	f	namespace:limonp
PathJoin	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline string PathJoin(const string& path1, const string& path2) {$/;"	f	namespace:limonp
PeekTop	include/tinyxml2.h	/^    const T& PeekTop() const            {$/;"	f	class:tinyxml2::DynArray
Pop	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BlockingQueue
Pop	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BoundedBlockingQueue
Pop	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BoundedQueue
Pop	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BlockingQueue
Pop	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BoundedBlockingQueue
Pop	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  T Pop() {$/;"	f	class:limonp::BoundedQueue
Pop	include/tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray
PopArr	include/tinyxml2.h	/^    void PopArr( size_t count ) {$/;"	f	class:tinyxml2::DynArray
PopDepth	src/tinyxml2.cpp	/^void XMLDocument::PopDepth()$/;"	f	class:tinyxml2::XMLDocument
PosTagger	include/simhash/cppjieba/PosTagger.hpp	/^  PosTagger(const DictTrie* dictTrie, const HMMModel* model) $/;"	f	class:cppjieba::PosTagger
PosTagger	include/simhash/cppjieba/PosTagger.hpp	/^  PosTagger(const string& dictPath,$/;"	f	class:cppjieba::PosTagger
PosTagger	include/simhash/cppjieba/PosTagger.hpp	/^class PosTagger {$/;"	c	namespace:cppjieba
PosTagger	include/simhash/deps/cppjieba/PosTagger.hpp	/^  PosTagger(const DictTrie* dictTrie, const HMMModel* model) $/;"	f	class:cppjieba::PosTagger
PosTagger	include/simhash/deps/cppjieba/PosTagger.hpp	/^  PosTagger(const string& dictPath,$/;"	f	class:cppjieba::PosTagger
PosTagger	include/simhash/deps/cppjieba/PosTagger.hpp	/^class PosTagger {$/;"	c	namespace:cppjieba
PreFilter	include/simhash/cppjieba/PreFilter.hpp	/^  PreFilter(const unordered_set<Rune>& symbols, $/;"	f	class:cppjieba::PreFilter
PreFilter	include/simhash/cppjieba/PreFilter.hpp	/^class PreFilter {$/;"	c	namespace:cppjieba
PreFilter	include/simhash/deps/cppjieba/PreFilter.hpp	/^  PreFilter(const unordered_set<Rune>& symbols, $/;"	f	class:cppjieba::PreFilter
PreFilter	include/simhash/deps/cppjieba/PreFilter.hpp	/^class PreFilter {$/;"	c	namespace:cppjieba
PrepareForNewNode	src/tinyxml2.cpp	/^void XMLPrinter::PrepareForNewNode( bool compactMode )$/;"	f	class:tinyxml2::XMLPrinter
PreviousSibling	include/tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle
PreviousSibling	include/tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode
PreviousSibling	include/tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSibling	include/tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	include/tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* name = 0 ) {$/;"	f	class:tinyxml2::XMLNode
PreviousSiblingElement	include/tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* name = 0 )				{$/;"	f	class:tinyxml2::XMLHandle
PreviousSiblingElement	include/tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* name = 0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle
PreviousSiblingElement	src/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
Print	src/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer ) const$/;"	f	class:tinyxml2::XMLDocument
Print	src/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter
PrintError	src/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument
PrintSpace	src/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter
PrintString	src/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter
ProcessEntities	include/tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument
Push	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  void Push(const T& x) {$/;"	f	class:limonp::BlockingQueue
Push	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  void Push(const T& x) {$/;"	f	class:limonp::BoundedBlockingQueue
Push	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  void Push(const T& t) {$/;"	f	class:limonp::BoundedQueue
Push	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  void Push(const T& x) {$/;"	f	class:limonp::BlockingQueue
Push	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  void Push(const T& x) {$/;"	f	class:limonp::BoundedBlockingQueue
Push	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  void Push(const T& t) {$/;"	f	class:limonp::BoundedQueue
Push	include/tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray
PushArr	include/tinyxml2.h	/^    T* PushArr( size_t count ) {$/;"	f	class:tinyxml2::DynArray
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute(const char* name, int64_t v)$/;"	f	class:tinyxml2::XMLPrinter
PushAttribute	src/tinyxml2.cpp	/^void XMLPrinter::PushAttribute(const char* name, uint64_t v)$/;"	f	class:tinyxml2::XMLPrinter
PushComment	src/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter
PushDeclaration	src/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
PushDepth	src/tinyxml2.cpp	/^void XMLDocument::PushDepth()$/;"	f	class:tinyxml2::XMLDocument
PushHeader	src/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( int64_t value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( uint64_t value )$/;"	f	class:tinyxml2::XMLPrinter
PushText	src/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter
PushUnknown	src/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter
Putc	src/tinyxml2.cpp	/^void XMLPrinter::Putc( char ch )$/;"	f	class:tinyxml2::XMLPrinter
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute( const char* name, double* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute( const char* name, float* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute( const char* name, int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute( const char* name, unsigned int* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute(const char* name, const char** value) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^	XMLError QueryAttribute(const char* name, int64_t* value) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^    XMLError QueryAttribute( const char* name, bool* value ) const {$/;"	f	class:tinyxml2::XMLElement
QueryAttribute	include/tinyxml2.h	/^    XMLError QueryAttribute(const char* name, uint64_t* value) const {$/;"	f	class:tinyxml2::XMLElement
QueryBoolAttribute	include/tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryBoolText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement
QueryBoolValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryDoubleAttribute	include/tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryDoubleText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement
QueryDoubleValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryFloatAttribute	include/tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement
QueryFloatText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement
QueryFloatValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QueryInt64Attribute	include/tinyxml2.h	/^	XMLError QueryInt64Attribute(const char* name, int64_t* value) const {$/;"	f	class:tinyxml2::XMLElement
QueryInt64Text	src/tinyxml2.cpp	/^XMLError XMLElement::QueryInt64Text(int64_t* ival) const$/;"	f	class:tinyxml2::XMLElement
QueryInt64Value	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryInt64Value(int64_t* value) const$/;"	f	class:tinyxml2::XMLAttribute
QueryIntAttribute	include/tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement
QueryIntText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement
QueryIntValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
QuerySegment	include/simhash/cppjieba/QuerySegment.hpp	/^  QuerySegment(const DictTrie* dictTrie, const HMMModel* model, size_t maxWordLen = 4)$/;"	f	class:cppjieba::QuerySegment
QuerySegment	include/simhash/cppjieba/QuerySegment.hpp	/^  QuerySegment(const string& dict, const string& model, const string& userDict = "", size_t maxWordLen = 4)$/;"	f	class:cppjieba::QuerySegment
QuerySegment	include/simhash/cppjieba/QuerySegment.hpp	/^class QuerySegment: public SegmentBase {$/;"	c	namespace:cppjieba
QuerySegment	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  QuerySegment(const DictTrie* dictTrie, const HMMModel* model, size_t maxWordLen = 4)$/;"	f	class:cppjieba::QuerySegment
QuerySegment	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  QuerySegment(const string& dict, const string& model, const string& userDict = "", size_t maxWordLen = 4)$/;"	f	class:cppjieba::QuerySegment
QuerySegment	include/simhash/deps/cppjieba/QuerySegment.hpp	/^class QuerySegment: public SegmentBase {$/;"	c	namespace:cppjieba
QueryStringAttribute	include/tinyxml2.h	/^	XMLError QueryStringAttribute(const char* name, const char** value) const {$/;"	f	class:tinyxml2::XMLElement
QueryUnsigned64Attribute	include/tinyxml2.h	/^    XMLError QueryUnsigned64Attribute(const char* name, uint64_t* value) const {$/;"	f	class:tinyxml2::XMLElement
QueryUnsigned64Text	src/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsigned64Text(uint64_t* uval) const$/;"	f	class:tinyxml2::XMLElement
QueryUnsigned64Value	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsigned64Value(uint64_t* value) const$/;"	f	class:tinyxml2::XMLAttribute
QueryUnsignedAttribute	include/tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedText	src/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement
QueryUnsignedValue	src/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute
RED	include/simhash/cppjieba/limonp/Colors.hpp	/^  RED,$/;"	e	enum:limonp::Color
RED	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  RED,$/;"	e	enum:limonp::Color
ROTATE_LEFT	include/simhash/cppjieba/limonp/Md5.hpp	63;"	d
ROTATE_LEFT	include/simhash/deps/cppjieba/limonp/Md5.hpp	63;"	d
RTrim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& RTrim(std::string & s, char x) {$/;"	f	namespace:limonp
RTrim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& RTrim(std::string &s) {$/;"	f	namespace:limonp
RTrim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& RTrim(std::string & s, char x) {$/;"	f	namespace:limonp
RTrim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& RTrim(std::string &s) {$/;"	f	namespace:limonp
Range	include/simhash/cppjieba/PreFilter.hpp	/^  struct Range {$/;"	s	class:cppjieba::PreFilter
Range	include/simhash/deps/cppjieba/PreFilter.hpp	/^  struct Range {$/;"	s	class:cppjieba::PreFilter
ReadBOM	src/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil
Reset	src/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair
RootElement	include/tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument
RootElement	include/tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure0
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure1
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure2
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure3
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure0
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure1
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure2
Run	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure3
Run	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^    virtual void Run() {$/;"	f	class:limonp::ThreadPool::Worker
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure0
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure1
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure2
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::Closure3
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure0
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure1
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure2
Run	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual void Run() {$/;"	f	class:limonp::ObjClosure3
Run	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^    virtual void Run() {$/;"	f	class:limonp::ThreadPool::Worker
Rune	include/simhash/cppjieba/TransCode.hpp	/^typedef uint32_t Rune;$/;"	t	namespace:cppjieba
Rune	include/simhash/deps/cppjieba/TransCode.hpp	/^typedef uint32_t Rune;$/;"	t	namespace:cppjieba
S	include/simhash/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon1
S	include/simhash/deps/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon3
S11	include/simhash/cppjieba/limonp/Md5.hpp	38;"	d
S11	include/simhash/deps/cppjieba/limonp/Md5.hpp	38;"	d
S12	include/simhash/cppjieba/limonp/Md5.hpp	39;"	d
S12	include/simhash/deps/cppjieba/limonp/Md5.hpp	39;"	d
S13	include/simhash/cppjieba/limonp/Md5.hpp	40;"	d
S13	include/simhash/deps/cppjieba/limonp/Md5.hpp	40;"	d
S14	include/simhash/cppjieba/limonp/Md5.hpp	41;"	d
S14	include/simhash/deps/cppjieba/limonp/Md5.hpp	41;"	d
S21	include/simhash/cppjieba/limonp/Md5.hpp	42;"	d
S21	include/simhash/deps/cppjieba/limonp/Md5.hpp	42;"	d
S22	include/simhash/cppjieba/limonp/Md5.hpp	43;"	d
S22	include/simhash/deps/cppjieba/limonp/Md5.hpp	43;"	d
S23	include/simhash/cppjieba/limonp/Md5.hpp	44;"	d
S23	include/simhash/deps/cppjieba/limonp/Md5.hpp	44;"	d
S24	include/simhash/cppjieba/limonp/Md5.hpp	45;"	d
S24	include/simhash/deps/cppjieba/limonp/Md5.hpp	45;"	d
S31	include/simhash/cppjieba/limonp/Md5.hpp	46;"	d
S31	include/simhash/deps/cppjieba/limonp/Md5.hpp	46;"	d
S32	include/simhash/cppjieba/limonp/Md5.hpp	47;"	d
S32	include/simhash/deps/cppjieba/limonp/Md5.hpp	47;"	d
S33	include/simhash/cppjieba/limonp/Md5.hpp	48;"	d
S33	include/simhash/deps/cppjieba/limonp/Md5.hpp	48;"	d
S34	include/simhash/cppjieba/limonp/Md5.hpp	49;"	d
S34	include/simhash/deps/cppjieba/limonp/Md5.hpp	49;"	d
S41	include/simhash/cppjieba/limonp/Md5.hpp	50;"	d
S41	include/simhash/deps/cppjieba/limonp/Md5.hpp	50;"	d
S42	include/simhash/cppjieba/limonp/Md5.hpp	51;"	d
S42	include/simhash/deps/cppjieba/limonp/Md5.hpp	51;"	d
S43	include/simhash/cppjieba/limonp/Md5.hpp	52;"	d
S43	include/simhash/deps/cppjieba/limonp/Md5.hpp	52;"	d
S44	include/simhash/cppjieba/limonp/Md5.hpp	53;"	d
S44	include/simhash/deps/cppjieba/limonp/Md5.hpp	53;"	d
SIMHASH_HASHES_JENKINS_H	include/simhash/jenkins.h	2;"	d
SIMHASH_SIMHASHER_HPP	include/simhash/Simhasher.hpp	2;"	d
SINGLE_QUOTE	src/tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SPECIAL_SYMBOL	include/simhash/cppjieba/SegmentBase.hpp	/^const Rune SPECIAL_SYMBOL[] = {32u, 9u, 10u, 65292u, 12290u};$/;"	m	namespace:cppjieba
SPECIAL_SYMBOL	include/simhash/deps/cppjieba/SegmentBase.hpp	/^const Rune SPECIAL_SYMBOL[] = {32u, 9u, 10u, 65292u, 12290u};$/;"	m	namespace:cppjieba
SRCS	Makefile	/^SRCS = $(wildcard $(SRC_DIR)\/*.cpp)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = src$/;"	m
STATUS_SUM	include/simhash/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon1
STATUS_SUM	include/simhash/deps/cppjieba/HMMModel.hpp	/^  enum {B = 0, E = 1, M = 2, S = 3, STATUS_SUM = 4};$/;"	e	enum:cppjieba::HMMModel::__anon3
STOP_WORD_PATH	src/SplitCppJieba.cpp	/^const char* const STOP_WORD_PATH = "dict\/stop_words.utf8";$/;"	v
SaveFile	src/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SaveFile	src/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument
SealElementIfJustOpened	src/tinyxml2.cpp	/^void XMLPrinter::SealElementIfJustOpened()$/;"	f	class:tinyxml2::XMLPrinter
SegmentBase	include/simhash/cppjieba/SegmentBase.hpp	/^  SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
SegmentBase	include/simhash/cppjieba/SegmentBase.hpp	/^class SegmentBase {$/;"	c	namespace:cppjieba
SegmentBase	include/simhash/deps/cppjieba/SegmentBase.hpp	/^  SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
SegmentBase	include/simhash/deps/cppjieba/SegmentBase.hpp	/^class SegmentBase {$/;"	c	namespace:cppjieba
SequentialLetterRule	include/simhash/cppjieba/HMMSegment.hpp	/^  Unicode::const_iterator SequentialLetterRule(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
SequentialLetterRule	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  Unicode::const_iterator SequentialLetterRule(Unicode::const_iterator begin, Unicode::const_iterator end) const {$/;"	f	class:cppjieba::HMMSegment
Set	include/tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair
SetAttribute	include/tinyxml2.h	/^	void SetAttribute(const char* name, int64_t value) {$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, float value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement
SetAttribute	include/tinyxml2.h	/^    void SetAttribute(const char* name, uint64_t value) {$/;"	f	class:tinyxml2::XMLElement
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute(int64_t v)$/;"	f	class:tinyxml2::XMLAttribute
SetAttribute	src/tinyxml2.cpp	/^void XMLAttribute::SetAttribute(uint64_t v)$/;"	f	class:tinyxml2::XMLAttribute
SetBOM	include/tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument
SetBoolSerialization	src/tinyxml2.cpp	/^void XMLUtil::SetBoolSerialization(const char* writeTrue, const char* writeFalse)$/;"	f	class:tinyxml2::XMLUtil
SetCData	include/tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText
SetError	src/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, int lineNum, const char* format, ... )$/;"	f	class:tinyxml2::XMLDocument
SetInternedStr	include/tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair
SetMaxWordLen	include/simhash/cppjieba/QuerySegment.hpp	/^  void SetMaxWordLen(size_t len) {$/;"	f	class:cppjieba::QuerySegment
SetMaxWordLen	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  void SetMaxWordLen(size_t len) {$/;"	f	class:cppjieba::QuerySegment
SetName	include/tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement
SetName	src/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute
SetQuerySegmentThreshold	include/simhash/cppjieba/Jieba.hpp	/^  void SetQuerySegmentThreshold(size_t len) {$/;"	f	class:cppjieba::Jieba
SetQuerySegmentThreshold	include/simhash/deps/cppjieba/Jieba.hpp	/^  void SetQuerySegmentThreshold(size_t len) {$/;"	f	class:cppjieba::Jieba
SetStaticWordWeights	include/simhash/cppjieba/DictTrie.hpp	/^  void SetStaticWordWeights(UserWordWeightOption option) {$/;"	f	class:cppjieba::DictTrie
SetStaticWordWeights	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void SetStaticWordWeights(UserWordWeightOption option) {$/;"	f	class:cppjieba::DictTrie
SetStr	src/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair
SetText	src/tinyxml2.cpp	/^void	XMLElement::SetText( const char* inText )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( bool v )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( double v )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( float v )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( int v )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText( unsigned v )$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText(int64_t v)$/;"	f	class:tinyxml2::XMLElement
SetText	src/tinyxml2.cpp	/^void XMLElement::SetText(uint64_t v) {$/;"	f	class:tinyxml2::XMLElement
SetUserData	include/tinyxml2.h	/^	void SetUserData(void* userData)	{ _userData = userData; }$/;"	f	class:tinyxml2::XMLNode
SetValue	src/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText
ShallowClone	src/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown
ShallowEqual	src/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment
ShallowEqual	src/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration
ShallowEqual	src/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement
ShallowEqual	src/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText
ShallowEqual	src/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown
Shrink	include/simhash/cppjieba/DictTrie.hpp	/^  void Shrink(vector<DictUnit>& units) const {$/;"	f	class:cppjieba::DictTrie
Shrink	include/simhash/deps/cppjieba/DictTrie.hpp	/^  void Shrink(vector<DictUnit>& units) const {$/;"	f	class:cppjieba::DictTrie
Simhasher	include/simhash/Simhasher.hpp	/^            Simhasher(const string& dictPath, const string& modelPath, const string& idfPath, const string& stopWords): _extractor(dictPath, modelPath, idfPath, stopWords)$/;"	f	class:simhash::Simhasher
Simhasher	include/simhash/Simhasher.hpp	/^    class Simhasher$/;"	c	namespace:simhash
Size	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  size_t Size() const {$/;"	f	class:limonp::BlockingQueue
Size	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  size_t Size() const {$/;"	f	class:limonp::BoundedQueue
Size	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  size_t Size() const {$/;"	f	class:limonp::BlockingQueue
Size	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  size_t Size() const {$/;"	f	class:limonp::BoundedQueue
Size	include/tinyxml2.h	/^    size_t Size() const {$/;"	f	class:tinyxml2::DynArray
SkipWhiteSpace	include/tinyxml2.h	/^    static char* SkipWhiteSpace( char* const p, int* curLineNumPtr ) {$/;"	f	class:tinyxml2::XMLUtil
SkipWhiteSpace	include/tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p, int* curLineNumPtr )	{$/;"	f	class:tinyxml2::XMLUtil
SpecialRule	include/simhash/cppjieba/PosTagger.hpp	/^  const char* SpecialRule(const Unicode& unicode) const {$/;"	f	class:cppjieba::PosTagger
SpecialRule	include/simhash/deps/cppjieba/PosTagger.hpp	/^  const char* SpecialRule(const Unicode& unicode) const {$/;"	f	class:cppjieba::PosTagger
Split	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline vector<string> Split(const string& src, const string& pattern, size_t maxsplit = string::npos) {$/;"	f	namespace:limonp
Split	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline void Split(const string& src, vector<string>& res, const string& pattern, size_t maxsplit = string::npos) {$/;"	f	namespace:limonp
Split	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline vector<string> Split(const string& src, const string& pattern, size_t maxsplit = string::npos) {$/;"	f	namespace:limonp
Split	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline void Split(const string& src, vector<string>& res, const string& pattern, size_t maxsplit = string::npos) {$/;"	f	namespace:limonp
SplitTool	include/SplitTool.h	/^    SplitTool(){};$/;"	f	class:SplitTool
SplitTool	include/SplitTool.h	/^class SplitTool$/;"	c
SplitToolCppJieba	include/SplitCppJieba.h	/^class SplitToolCppJieba$/;"	c
SplitToolCppJieba	src/SplitCppJieba.cpp	/^SplitToolCppJieba::SplitToolCppJieba()$/;"	f	class:SplitToolCppJieba
Start	include/simhash/cppjieba/limonp/Thread.hpp	/^  void Start() {$/;"	f	class:limonp::IThread
Start	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  void Start() {$/;"	f	class:limonp::ThreadPool
Start	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  void Start() {$/;"	f	class:limonp::IThread
Start	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  void Start() {$/;"	f	class:limonp::ThreadPool
StartsWith	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline bool StartsWith(const string& str, const string& prefix) {$/;"	f	namespace:limonp
StartsWith	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline bool StartsWith(const string& str, const string& prefix) {$/;"	f	namespace:limonp
Stop	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  void Stop() {$/;"	f	class:limonp::ThreadPool
Stop	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  void Stop() {$/;"	f	class:limonp::ThreadPool
StrPair	include/tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair
StrPair	include/tinyxml2.h	/^class TINYXML2_LIB StrPair$/;"	c	namespace:tinyxml2
Stream	include/simhash/cppjieba/limonp/Logging.hpp	/^  std::ostream& Stream() {$/;"	f	class:limonp::Logger
Stream	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  std::ostream& Stream() {$/;"	f	class:limonp::Logger
StringEqual	include/tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil
StringFormat	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline string StringFormat(const char* fmt, ...) {$/;"	f	namespace:limonp
StringFormat	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline string StringFormat(const char* fmt, ...) {$/;"	f	namespace:limonp
SwapRemove	include/tinyxml2.h	/^	void SwapRemove(size_t i) {$/;"	f	class:tinyxml2::DynArray
TARGET	Makefile	/^TARGET = .\/httpserver$/;"	m
TEXT_ELEMENT	include/tinyxml2.h	/^        TEXT_ELEMENT		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::Mode
TEXT_ELEMENT_LEAVE_ENTITIES	include/tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::Mode
TINYXML2_DEBUG	include/tinyxml2.h	55;"	d
TINYXML2_INCLUDED	include/tinyxml2.h	25;"	d
TINYXML2_LIB	include/tinyxml2.h	66;"	d
TINYXML2_LIB	include/tinyxml2.h	68;"	d
TINYXML2_LIB	include/tinyxml2.h	70;"	d
TINYXML2_LIB	include/tinyxml2.h	73;"	d
TINYXML2_LIB	include/tinyxml2.h	75;"	d
TINYXML2_MAJOR_VERSION	include/tinyxml2.h	103;"	d
TINYXML2_MAX_ELEMENT_DEPTH	include/tinyxml2.h	/^static const int TINYXML2_MAX_ELEMENT_DEPTH = 500;$/;"	v
TINYXML2_MINOR_VERSION	include/tinyxml2.h	104;"	d
TINYXML2_PATCH_VERSION	include/tinyxml2.h	105;"	d
TIXML2_MAJOR_VERSION	include/tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 10;$/;"	v
TIXML2_MINOR_VERSION	include/tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	include/tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 0;$/;"	v
TIXMLASSERT	include/tinyxml2.h	83;"	d
TIXMLASSERT	include/tinyxml2.h	86;"	d
TIXMLASSERT	include/tinyxml2.h	89;"	d
TIXMLASSERT	include/tinyxml2.h	92;"	d
TIXML_FSEEK	src/tinyxml2.cpp	104;"	d	file:
TIXML_FSEEK	src/tinyxml2.cpp	107;"	d	file:
TIXML_FSEEK	src/tinyxml2.cpp	110;"	d	file:
TIXML_FSEEK	src/tinyxml2.cpp	113;"	d	file:
TIXML_FTELL	src/tinyxml2.cpp	105;"	d	file:
TIXML_FTELL	src/tinyxml2.cpp	108;"	d	file:
TIXML_FTELL	src/tinyxml2.cpp	111;"	d	file:
TIXML_FTELL	src/tinyxml2.cpp	114;"	d	file:
TIXML_SNPRINTF	src/tinyxml2.cpp	/^	static inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f	file:
TIXML_SNPRINTF	src/tinyxml2.cpp	63;"	d	file:
TIXML_SNPRINTF	src/tinyxml2.cpp	92;"	d	file:
TIXML_SSCANF	src/tinyxml2.cpp	100;"	d	file:
TIXML_SSCANF	src/tinyxml2.cpp	60;"	d	file:
TIXML_SSCANF	src/tinyxml2.cpp	65;"	d	file:
TIXML_UTF_LEAD_0	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	src/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TIXML_VSCPRINTF	src/tinyxml2.cpp	/^		static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:
TIXML_VSCPRINTF	src/tinyxml2.cpp	/^	static inline int TIXML_VSCPRINTF( const char* format, va_list va )$/;"	f	file:
TIXML_VSCPRINTF	src/tinyxml2.cpp	59;"	d	file:
TIXML_VSCPRINTF	src/tinyxml2.cpp	68;"	d	file:
TIXML_VSNPRINTF	src/tinyxml2.cpp	/^	static inline int TIXML_VSNPRINTF( char* buffer, size_t size, const char* format, va_list va )$/;"	f	file:
TIXML_VSNPRINTF	src/tinyxml2.cpp	64;"	d	file:
TIXML_VSNPRINTF	src/tinyxml2.cpp	93;"	d	file:
Tag	include/simhash/cppjieba/Jieba.hpp	/^  void Tag(const string& sentence, vector<pair<string, string> >& words) const {$/;"	f	class:cppjieba::Jieba
Tag	include/simhash/cppjieba/PosTagger.hpp	/^  bool Tag(const string& src, vector<pair<string, string> >& res) const {$/;"	f	class:cppjieba::PosTagger
Tag	include/simhash/deps/cppjieba/Jieba.hpp	/^  void Tag(const string& sentence, vector<pair<string, string> >& words) const {$/;"	f	class:cppjieba::Jieba
Tag	include/simhash/deps/cppjieba/PosTagger.hpp	/^  bool Tag(const string& src, vector<pair<string, string> >& res) const {$/;"	f	class:cppjieba::PosTagger
ThreadPool	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  ThreadPool(size_t thread_num)$/;"	f	class:limonp::ThreadPool
ThreadPool	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^class ThreadPool: NonCopyable {$/;"	c	namespace:limonp
ThreadPool	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  ThreadPool(size_t thread_num)$/;"	f	class:limonp::ThreadPool
ThreadPool	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^class ThreadPool: NonCopyable {$/;"	c	namespace:limonp
ToBool	src/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil
ToComment	include/tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode
ToComment	include/tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	include/tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle
ToDeclaration	include/tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle
ToDeclaration	include/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode
ToDeclaration	include/tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode
ToDocument	include/tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode
ToDocument	include/tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode
ToDouble	src/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil
ToElement	include/tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle
ToElement	include/tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToElement	include/tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode
ToElement	include/tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode
ToElementWithName	src/tinyxml2.cpp	/^const XMLElement* XMLNode::ToElementWithName( const char* name ) const$/;"	f	class:tinyxml2::XMLNode
ToFloat	src/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil
ToInt	src/tinyxml2.cpp	/^bool XMLUtil::ToInt(const char* str, int* value)$/;"	f	class:tinyxml2::XMLUtil
ToInt64	src/tinyxml2.cpp	/^bool XMLUtil::ToInt64(const char* str, int64_t* value)$/;"	f	class:tinyxml2::XMLUtil
ToNode	include/tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle
ToNode	include/tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( int64_t v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( uint64_t v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToStr	src/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil
ToText	include/tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle
ToText	include/tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle
ToText	include/tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode
ToText	include/tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	include/tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle
ToUnknown	include/tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle
ToUnknown	include/tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode
ToUnknown	include/tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode
ToUnsigned	src/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned(const char* str, unsigned* value)$/;"	f	class:tinyxml2::XMLUtil
ToUnsigned64	src/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned64(const char* str, uint64_t* value) {$/;"	f	class:tinyxml2::XMLUtil
Trace	include/tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT
TransCode	include/simhash/cppjieba/TransCode.hpp	/^namespace TransCode {$/;"	n	namespace:cppjieba
TransCode	include/simhash/deps/cppjieba/TransCode.hpp	/^namespace TransCode {$/;"	n	namespace:cppjieba
TransferTo	src/tinyxml2.cpp	/^void StrPair::TransferTo( StrPair* other )$/;"	f	class:tinyxml2::StrPair
Trie	include/simhash/cppjieba/Trie.hpp	/^  Trie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers)$/;"	f	class:cppjieba::Trie
Trie	include/simhash/cppjieba/Trie.hpp	/^class Trie {$/;"	c	namespace:cppjieba
Trie	include/simhash/deps/cppjieba/Trie.hpp	/^  Trie(const vector<Unicode>& keys, const vector<const DictUnit*>& valuePointers)$/;"	f	class:cppjieba::Trie
Trie	include/simhash/deps/cppjieba/Trie.hpp	/^class Trie {$/;"	c	namespace:cppjieba
TrieKey	include/simhash/cppjieba/Trie.hpp	/^typedef Rune TrieKey;$/;"	t	namespace:cppjieba
TrieKey	include/simhash/deps/cppjieba/Trie.hpp	/^typedef Rune TrieKey;$/;"	t	namespace:cppjieba
TrieNode	include/simhash/cppjieba/Trie.hpp	/^  TrieNode(): next(NULL), ptValue(NULL) {$/;"	f	class:cppjieba::TrieNode
TrieNode	include/simhash/cppjieba/Trie.hpp	/^class TrieNode {$/;"	c	namespace:cppjieba
TrieNode	include/simhash/deps/cppjieba/Trie.hpp	/^  TrieNode(): next(NULL), ptValue(NULL) {$/;"	f	class:cppjieba::TrieNode
TrieNode	include/simhash/deps/cppjieba/Trie.hpp	/^class TrieNode {$/;"	c	namespace:cppjieba
Trim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& Trim(std::string &s) {$/;"	f	namespace:limonp
Trim	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline std::string& Trim(std::string &s, char x) {$/;"	f	namespace:limonp
Trim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& Trim(std::string &s) {$/;"	f	namespace:limonp
Trim	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline std::string& Trim(std::string &s, char x) {$/;"	f	namespace:limonp
TwocharToUint16	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline uint16_t TwocharToUint16(char high, char low) {$/;"	f	namespace:limonp
TwocharToUint16	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline uint16_t TwocharToUint16(char high, char low) {$/;"	f	namespace:limonp
UINT2	include/simhash/cppjieba/limonp/Md5.hpp	/^typedef unsigned short int UINT2;$/;"	t	namespace:limonp
UINT2	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^typedef unsigned short int UINT2;$/;"	t	namespace:limonp
UINT4	include/simhash/cppjieba/limonp/Md5.hpp	/^typedef unsigned int UINT4;$/;"	t	namespace:limonp
UINT4	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^typedef unsigned int UINT4;$/;"	t	namespace:limonp
UNKNOWN_TAG	include/simhash/cppjieba/DictTrie.hpp	/^const char* const UNKNOWN_TAG = "";$/;"	m	namespace:cppjieba
UNKNOWN_TAG	include/simhash/deps/cppjieba/DictTrie.hpp	/^const char* const UNKNOWN_TAG = "";$/;"	m	namespace:cppjieba
USER_DICT_PATH	src/SplitCppJieba.cpp	/^const char* const USER_DICT_PATH = "dict\/user.dict.utf8";$/;"	v
UnLock	include/simhash/cppjieba/limonp/FileLock.hpp	/^  void UnLock() {$/;"	f	class:limonp::FileLock
UnLock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  void UnLock() {$/;"	f	class:limonp::FileLock
Unicode	include/simhash/cppjieba/TransCode.hpp	/^typedef limonp::LocalVector<Rune> Unicode;$/;"	t	namespace:cppjieba
Unicode	include/simhash/deps/cppjieba/TransCode.hpp	/^typedef limonp::LocalVector<Rune> Unicode;$/;"	t	namespace:cppjieba
Unicode32ToUtf8	include/simhash/cppjieba/limonp/StringUtil.hpp	/^void Unicode32ToUtf8(Uint32ContainerConIter begin, Uint32ContainerConIter end, string& res) {$/;"	f	namespace:limonp
Unicode32ToUtf8	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^void Unicode32ToUtf8(Uint32ContainerConIter begin, Uint32ContainerConIter end, string& res) {$/;"	f	namespace:limonp
UnicodeToUtf8	include/simhash/cppjieba/limonp/StringUtil.hpp	/^void UnicodeToUtf8(Uint16ContainerConIter begin, Uint16ContainerConIter end, string& res) {$/;"	f	namespace:limonp
UnicodeToUtf8	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^void UnicodeToUtf8(Uint16ContainerConIter begin, Uint16ContainerConIter end, string& res) {$/;"	f	namespace:limonp
Unlink	src/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode
Unlock	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  void Unlock() {$/;"	f	class:limonp::MutexLock
Unlock	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  void Unlock() {$/;"	f	class:limonp::MutexLock
Unsigned64Attribute	src/tinyxml2.cpp	/^uint64_t XMLElement::Unsigned64Attribute(const char* name, uint64_t defaultValue) const$/;"	f	class:tinyxml2::XMLElement
Unsigned64Text	src/tinyxml2.cpp	/^uint64_t XMLElement::Unsigned64Text(uint64_t defaultValue) const$/;"	f	class:tinyxml2::XMLElement
Unsigned64Value	include/tinyxml2.h	/^    uint64_t Unsigned64Value() const {$/;"	f	class:tinyxml2::XMLAttribute
UnsignedAttribute	src/tinyxml2.cpp	/^unsigned XMLElement::UnsignedAttribute(const char* name, unsigned defaultValue) const$/;"	f	class:tinyxml2::XMLElement
UnsignedText	src/tinyxml2.cpp	/^unsigned XMLElement::UnsignedText(unsigned defaultValue) const$/;"	f	class:tinyxml2::XMLElement
UnsignedValue	include/tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute
Untracked	include/tinyxml2.h	/^    size_t Untracked() const {$/;"	f	class:tinyxml2::MemPoolT
Update	include/simhash/cppjieba/limonp/Md5.hpp	/^  void Update($/;"	f	class:limonp::MD5
Update	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  void Update($/;"	f	class:limonp::MD5
Upper	include/simhash/cppjieba/limonp/StringUtil.hpp	/^inline string& Upper(string& str) {$/;"	f	namespace:limonp
Upper	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^inline string& Upper(string& str) {$/;"	f	namespace:limonp
UserWordWeightOption	include/simhash/cppjieba/DictTrie.hpp	/^  enum UserWordWeightOption {$/;"	g	class:cppjieba::DictTrie
UserWordWeightOption	include/simhash/deps/cppjieba/DictTrie.hpp	/^  enum UserWordWeightOption {$/;"	g	class:cppjieba::DictTrie
Utf8ToUnicode	include/simhash/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode(const char * const str, size_t len, Uint16Container& vec) {$/;"	f	namespace:limonp
Utf8ToUnicode	include/simhash/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode(const string& str, Uint16Container& vec) {$/;"	f	namespace:limonp
Utf8ToUnicode	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode(const char * const str, size_t len, Uint16Container& vec) {$/;"	f	namespace:limonp
Utf8ToUnicode	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode(const string& str, Uint16Container& vec) {$/;"	f	namespace:limonp
Utf8ToUnicode32	include/simhash/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode32(const string& str, Uint32Container& vec) {$/;"	f	namespace:limonp
Utf8ToUnicode32	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^bool Utf8ToUnicode32(const string& str, Uint32Container& vec) {$/;"	f	namespace:limonp
Value	src/tinyxml2.cpp	/^const char* XMLAttribute::Value() const$/;"	f	class:tinyxml2::XMLAttribute
Value	src/tinyxml2.cpp	/^const char* XMLNode::Value() const$/;"	f	class:tinyxml2::XMLNode
Visit	include/tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
Visit	include/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor
Visit	include/tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor
Visit	include/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter
Visit	src/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	include/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	include/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor
VisitEnter	src/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter
VisitEnter	src/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter
VisitExit	include/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	include/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor
VisitExit	src/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& element )$/;"	f	class:tinyxml2::XMLPrinter
Viterbi	include/simhash/cppjieba/HMMSegment.hpp	/^  void Viterbi(Unicode::const_iterator begin, $/;"	f	class:cppjieba::HMMSegment
Viterbi	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  void Viterbi(Unicode::const_iterator begin, $/;"	f	class:cppjieba::HMMSegment
Wait	include/simhash/cppjieba/limonp/Condition.hpp	/^  void Wait() {$/;"	f	class:limonp::Condition
Wait	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  void Wait() {$/;"	f	class:limonp::Condition
WebPage	include/WebPage.h	/^    WebPage(){};$/;"	f	class:WebPage
WebPage	include/WebPage.h	/^class WebPage$/;"	c
WebPage	src/WebPage.cpp	/^WebPage::WebPage(string &docStr)$/;"	f	class:WebPage
WebPageQuery	include/WebPageQuery.h	/^class WebPageQuery$/;"	c
WebPageQuery	src/WebPageQuery.cpp	/^WebPageQuery::WebPageQuery() {$/;"	f	class:WebPageQuery
WeightCompare	include/simhash/cppjieba/DictTrie.hpp	/^  static bool WeightCompare(const DictUnit& lhs, const DictUnit& rhs) {$/;"	f	class:cppjieba::DictTrie
WeightCompare	include/simhash/deps/cppjieba/DictTrie.hpp	/^  static bool WeightCompare(const DictUnit& lhs, const DictUnit& rhs) {$/;"	f	class:cppjieba::DictTrie
Whitespace	include/tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	include/tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument
WordWeightMax	include/simhash/cppjieba/DictTrie.hpp	/^    WordWeightMax,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMax	include/simhash/deps/cppjieba/DictTrie.hpp	/^    WordWeightMax,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMedian	include/simhash/cppjieba/DictTrie.hpp	/^    WordWeightMedian,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMedian	include/simhash/deps/cppjieba/DictTrie.hpp	/^    WordWeightMedian,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMin	include/simhash/cppjieba/DictTrie.hpp	/^    WordWeightMin,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
WordWeightMin	include/simhash/deps/cppjieba/DictTrie.hpp	/^    WordWeightMin,$/;"	e	enum:cppjieba::DictTrie::UserWordWeightOption
Worker	include/simhash/cppjieba/limonp/Thread.hpp	/^  static void * Worker(void * data) {$/;"	f	class:limonp::IThread
Worker	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^    Worker(ThreadPool* pool): ptThreadPool_(pool) {$/;"	f	class:limonp::ThreadPool::Worker
Worker	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  class Worker: public IThread {$/;"	c	class:limonp::ThreadPool
Worker	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  static void * Worker(void * data) {$/;"	f	class:limonp::IThread
Worker	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^    Worker(ThreadPool* pool): ptThreadPool_(pool) {$/;"	f	class:limonp::ThreadPool::Worker
Worker	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  class Worker: public IThread {$/;"	c	class:limonp::ThreadPool
Write	include/tinyxml2.h	/^    inline void Write(const char* data) { Write(data, strlen(data)); }$/;"	f	class:tinyxml2::XMLPrinter
Write	src/tinyxml2.cpp	/^void XMLPrinter::Write( const char* data, size_t size )$/;"	f	class:tinyxml2::XMLPrinter
XCHECK	include/simhash/cppjieba/limonp/Logging.hpp	18;"	d
XCHECK	include/simhash/deps/cppjieba/limonp/Logging.hpp	18;"	d
XLOG	include/simhash/cppjieba/limonp/Logging.hpp	17;"	d
XLOG	include/simhash/deps/cppjieba/limonp/Logging.hpp	17;"	d
XMLAttribute	include/tinyxml2.h	/^    XMLAttribute() : _name(), _value(),_parseLineNum( 0 ), _next( 0 ), _memPool( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute
XMLAttribute	include/tinyxml2.h	/^class TINYXML2_LIB XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	include/tinyxml2.h	/^class TINYXML2_LIB XMLComment : public XMLNode$/;"	c	namespace:tinyxml2
XMLComment	src/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment
XMLConstHandle	include/tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref ) : _node( ref._node ) {$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	include/tinyxml2.h	/^    explicit XMLConstHandle( const XMLNode& node ) : _node( &node ) {$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	include/tinyxml2.h	/^    explicit XMLConstHandle( const XMLNode* node ) : _node( node ) {$/;"	f	class:tinyxml2::XMLConstHandle
XMLConstHandle	include/tinyxml2.h	/^class TINYXML2_LIB XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	include/tinyxml2.h	/^class TINYXML2_LIB XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2
XMLDeclaration	src/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration
XMLDocument	include/tinyxml2.h	/^class TINYXML2_LIB XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2
XMLDocument	src/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespaceMode ) :$/;"	f	class:tinyxml2::XMLDocument
XMLElement	include/tinyxml2.h	/^class TINYXML2_LIB XMLElement : public XMLNode$/;"	c	namespace:tinyxml2
XMLElement	src/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement
XMLError	include/tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLHandle	include/tinyxml2.h	/^    XMLHandle( const XMLHandle& ref ) : _node( ref._node ) {$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	include/tinyxml2.h	/^    explicit XMLHandle( XMLNode& node ) : _node( &node ) {$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	include/tinyxml2.h	/^    explicit XMLHandle( XMLNode* node ) : _node( node ) {$/;"	f	class:tinyxml2::XMLHandle
XMLHandle	include/tinyxml2.h	/^class TINYXML2_LIB XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	include/tinyxml2.h	/^class TINYXML2_LIB XMLNode$/;"	c	namespace:tinyxml2
XMLNode	src/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode
XMLPrinter	include/tinyxml2.h	/^class TINYXML2_LIB XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2
XMLPrinter	src/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact, int depth ) :$/;"	f	class:tinyxml2::XMLPrinter
XMLText	include/tinyxml2.h	/^    explicit XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText
XMLText	include/tinyxml2.h	/^class TINYXML2_LIB XMLText : public XMLNode$/;"	c	namespace:tinyxml2
XMLUnknown	include/tinyxml2.h	/^class TINYXML2_LIB XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2
XMLUnknown	src/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown
XMLUtil	include/tinyxml2.h	/^class TINYXML2_LIB XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	include/tinyxml2.h	/^class TINYXML2_LIB XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	include/tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ELEMENT_DEPTH_EXCEEDED	include/tinyxml2.h	/^	XML_ELEMENT_DEPTH_EXCEEDED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_COUNT	include/tinyxml2.h	/^	XML_ERROR_COUNT$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	include/tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	include/tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	include/tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	include/tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	include/tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	include/tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	include/tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	include/tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	include/tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	include/tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	include/tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	include/tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	include/tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ATTRIBUTE	include/tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	include/tinyxml2.h	/^    XML_NO_TEXT_NODE,$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	include/tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	include/tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
YELLOW	include/simhash/cppjieba/limonp/Colors.hpp	/^  YELLOW,$/;"	e	enum:limonp::Color
YELLOW	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^  YELLOW,$/;"	e	enum:limonp::Color
__CONFIGURATION_H__	include/Configuration.h	2;"	d
__DICTIONARY_H__	include/Dictionary.h	2;"	d
__KEYRECOMMANDER_H__	include/KeyRecommander.h	2;"	d
__MD5_H__	include/simhash/cppjieba/limonp/Md5.hpp	2;"	d
__MD5_H__	include/simhash/deps/cppjieba/limonp/Md5.hpp	2;"	d
__MYSQL_H__	include/Mysql.h	2;"	d
__SPLITTOOLCPPJIEBA_H__	include/SplitCppJieba.h	2;"	d
__SPLITTOOL_H__	include/SplitTool.h	2;"	d
__WEBPAGEQUERY_H__	include/WebPageQuery.h	2;"	d
__WEBPAGE_H__	include/WebPage.h	2;"	d
__context_t	include/simhash/cppjieba/limonp/Md5.hpp	/^  struct __context_t {$/;"	s	class:limonp::MD5
__context_t	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  struct __context_t {$/;"	s	class:limonp::MD5
_allocated	include/tinyxml2.h	/^    size_t _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray
_ar	include/WebPageQuery.h	/^    static AutoRelease _ar;$/;"	m	class:WebPageQuery
_ar	src/WebPageQuery.cpp	/^WebPageQuery::AutoRelease WebPageQuery::_ar;$/;"	m	class:WebPageQuery	file:
_attributePool	include/tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument
_blockPtrs	include/tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT
_buffer	include/tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter
_charBuffer	include/tinyxml2.h	/^    char*			_charBuffer;$/;"	m	class:tinyxml2::XMLDocument
_closingType	include/tinyxml2.h	/^    ElementClosingType _closingType;$/;"	m	class:tinyxml2::XMLElement
_cn_dict	include/Dictionary.h	/^    vector<pair<string,int>> _cn_dict;$/;"	m	class:Dictionary
_commentPool	include/tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument
_compactMode	include/tinyxml2.h	/^	bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter
_configMap	include/Configuration.h	/^    map<string,string> _configMap;$/;"	m	class:Configuration
_currentAllocs	include/tinyxml2.h	/^    size_t _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT
_depth	include/tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter
_dict	include/KeyRecommander.h	/^    Dictionary * _dict;$/;"	m	class:KeyRecommander
_docContent	include/WebPage.h	/^    string _docContent;$/;"	m	class:WebPage
_docId	include/WebPage.h	/^    int _docId;$/;"	m	class:WebPage
_docTitle	include/WebPage.h	/^    string _docTitle;$/;"	m	class:WebPage
_docUrl	include/WebPage.h	/^    string _docUrl;$/;"	m	class:WebPage
_document	include/tinyxml2.h	/^		XMLDocument * _document;$/;"	m	class:tinyxml2::XMLDocument::DepthTracker
_document	include/tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode
_elementJustOpened	include/tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter
_elementPool	include/tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument
_en_dict	include/Dictionary.h	/^    vector<pair<string,int>> _en_dict;$/;"	m	class:Dictionary
_end	include/tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair
_entityFlag	include/tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_errorID	include/tinyxml2.h	/^    XMLError		_errorID;$/;"	m	class:tinyxml2::XMLDocument
_errorLineNum	include/tinyxml2.h	/^    int             _errorLineNum;$/;"	m	class:tinyxml2::XMLDocument
_errorNames	include/tinyxml2.h	/^	static const char* _errorNames[XML_ERROR_COUNT];$/;"	m	class:tinyxml2::XMLDocument
_errorNames	src/tinyxml2.cpp	/^const char* XMLDocument::_errorNames[XML_ERROR_COUNT] = {$/;"	m	class:tinyxml2::XMLDocument	file:
_errorStr	include/tinyxml2.h	/^    mutable StrPair	_errorStr;$/;"	m	class:tinyxml2::XMLDocument
_extractor	include/simhash/Simhasher.hpp	/^            KeywordExtractor _extractor;$/;"	m	class:simhash::Simhasher
_filepath	include/Configuration.h	/^    string _filepath;$/;"	m	class:Configuration
_firstChild	include/tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode
_firstElement	include/tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter
_flags	include/tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair
_fp	include/tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter
_hasher	include/simhash/Simhasher.hpp	/^            jenkins _hasher;$/;"	m	class:simhash::Simhasher
_index_table	include/Dictionary.h	/^    map<string,set<int>> _index_table;$/;"	m	class:Dictionary
_invertIndexTable	include/WebPageQuery.h	/^    map<string,vector<pair<int,double>>>  _invertIndexTable;\/\/倒排索引库$/;"	m	class:WebPageQuery
_isCData	include/tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText
_jieba	include/SplitCppJieba.h	/^    cppjieba::Jieba _jieba;$/;"	m	class:SplitToolCppJieba
_jieba	include/WebPageQuery.h	/^    SplitToolCppJieba* _jieba;$/;"	m	class:WebPageQuery
_lastChild	include/tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode
_maxAllocs	include/tinyxml2.h	/^    size_t _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT
_mem	include/tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray
_memPool	include/tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode
_memPool	include/tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute
_mysql	include/Mysql.h	/^    MYSQL* _mysql;$/;"	m	class:Mysql
_nAllocs	include/tinyxml2.h	/^    size_t _nAllocs;$/;"	m	class:tinyxml2::MemPoolT
_nUntracked	include/tinyxml2.h	/^    size_t _nUntracked;$/;"	m	class:tinyxml2::MemPoolT
_name	include/tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute
_next	include/tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute
_next	include/tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode
_node	include/tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle
_node	include/tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle
_offsetLib	include/WebPageQuery.h	/^    map<int,pair<int,int>> _offsetLib;\/\/偏移库$/;"	m	class:WebPageQuery
_pInstance	include/Configuration.h	/^    static Configuration* _pInstance;$/;"	m	class:Configuration
_pInstance	include/Dictionary.h	/^    static Dictionary * _pInstance;$/;"	m	class:Dictionary
_pInstance	include/WebPageQuery.h	/^    static WebPageQuery* _pInstance;$/;"	m	class:WebPageQuery
_pInstance	src/WebPageQuery.cpp	/^WebPageQuery* WebPageQuery::_pInstance=nullptr;$/;"	m	class:WebPageQuery	file:
_pageLib	include/WebPageQuery.h	/^    map<int,WebPage> _pageLib;\/\/网页库$/;"	m	class:WebPageQuery
_parent	include/tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode
_parseCurLineNum	include/tinyxml2.h	/^    int				_parseCurLineNum;$/;"	m	class:tinyxml2::XMLDocument
_parseLineNum	include/tinyxml2.h	/^    int             _parseLineNum;$/;"	m	class:tinyxml2::XMLAttribute
_parseLineNum	include/tinyxml2.h	/^    int             _parseLineNum;$/;"	m	class:tinyxml2::XMLNode
_parsingDepth	include/tinyxml2.h	/^	int				_parsingDepth;$/;"	m	class:tinyxml2::XMLDocument
_pool	include/tinyxml2.h	/^    T   _pool[INITIAL_SIZE];$/;"	m	class:tinyxml2::DynArray
_prev	include/tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode
_processEntities	include/tinyxml2.h	/^    bool			_processEntities;$/;"	m	class:tinyxml2::XMLDocument
_processEntities	include/tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter
_queryWord	include/KeyRecommander.h	/^        const string& _queryWord;  \/\/ 保存查询词的引用$/;"	m	struct:KeyRecommander::CompareByDistance
_queryWord	include/KeyRecommander.h	/^    string _queryWord;$/;"	m	class:KeyRecommander
_res	include/Mysql.h	/^    MYSQL_RES* _res;$/;"	m	class:Mysql
_restrictedEntityFlag	include/tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter
_resultQue	include/KeyRecommander.h	/^    priority_queue<string,vector<string>,CompareByDistance> _resultQue;$/;"	m	class:KeyRecommander
_root	include/tinyxml2.h	/^    Item* _root;$/;"	m	class:tinyxml2::MemPoolT
_rootAttribute	include/tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement
_sameword	include/KeyRecommander.h	/^    set<int> _sameword;$/;"	m	class:KeyRecommander
_simhashValue	include/WebPage.h	/^    uint64_t _simhashValue;$/;"	m	class:WebPage
_size	include/tinyxml2.h	/^    size_t _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray
_stack	include/tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter
_start	include/tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair
_stopWordList	include/Configuration.h	/^    set<string>_stopWordList;$/;"	m	class:Configuration
_stopWordList	include/WebPageQuery.h	/^    set<string>  _stopWordList;\/\/停用词集$/;"	m	class:WebPageQuery
_textDepth	include/tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter
_textPool	include/tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument
_unlinked	include/tinyxml2.h	/^	DynArray<XMLNode*, 10> _unlinked;$/;"	m	class:tinyxml2::XMLDocument
_userData	include/tinyxml2.h	/^	void*			_userData;$/;"	m	class:tinyxml2::XMLNode
_value	include/tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode
_value	include/tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute
_whitespaceMode	include/tinyxml2.h	/^    Whitespace		_whitespaceMode;$/;"	m	class:tinyxml2::XMLDocument
_wordsMap	include/WebPage.h	/^    unordered_map<string,int> _wordsMap;$/;"	m	class:WebPage
_writeBOM	include/tinyxml2.h	/^    bool			_writeBOM;$/;"	m	class:tinyxml2::XMLDocument
active_node_infos_	include/simhash/cppjieba/DictTrie.hpp	/^  deque<DictUnit> active_node_infos_; \/\/ must not be vector$/;"	m	class:cppjieba::DictTrie
active_node_infos_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  deque<DictUnit> active_node_infos_; \/\/ must not be vector$/;"	m	class:cppjieba::DictTrie
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure1
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure2
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure3
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure1
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure2
arg1_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure3
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure1
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure2
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::Closure3
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure1
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure2
arg1_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg1 arg1_;$/;"	m	class:limonp::ObjClosure3
arg2_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::Closure2
arg2_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::Closure3
arg2_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::ObjClosure2
arg2_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::ObjClosure3
arg2_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::Closure2
arg2_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::Closure3
arg2_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::ObjClosure2
arg2_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg2 arg2_;$/;"	m	class:limonp::ObjClosure3
arg3_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg3 arg3_;$/;"	m	class:limonp::Closure3
arg3_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Arg3 arg3_;$/;"	m	class:limonp::ObjClosure3
arg3_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg3 arg3_;$/;"	m	class:limonp::Closure3
arg3_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Arg3 arg3_;$/;"	m	class:limonp::ObjClosure3
args_	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  vector<string> args_;$/;"	m	class:limonp::ArgvContext
args_	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  vector<string> args_;$/;"	m	class:limonp::ArgvContext
begin	include/simhash/cppjieba/Jieba.hpp	/^    size_t begin;$/;"	m	struct:cppjieba::Jieba::LocWord
begin	include/simhash/cppjieba/PreFilter.hpp	/^    Unicode::const_iterator begin;$/;"	m	struct:cppjieba::PreFilter::Range
begin	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  const_iterator begin() const {$/;"	f	class:limonp::LocalVector
begin	include/simhash/deps/cppjieba/Jieba.hpp	/^    size_t begin;$/;"	m	struct:cppjieba::Jieba::LocWord
begin	include/simhash/deps/cppjieba/PreFilter.hpp	/^    Unicode::const_iterator begin;$/;"	m	struct:cppjieba::PreFilter::Range
begin	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  const_iterator begin() const {$/;"	f	class:limonp::LocalVector
binaryStringToUint64	include/simhash/Simhasher.hpp	/^            static uint64_t binaryStringToUint64(const string& bin)$/;"	f	class:simhash::Simhasher
buffer	include/simhash/cppjieba/limonp/Md5.hpp	/^    unsigned char buffer[64];                         \/* input buffer *\/$/;"	m	struct:limonp::MD5::__context_t
buffer	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^    unsigned char buffer[64];                         \/* input buffer *\/$/;"	m	struct:limonp::MD5::__context_t
buffer_	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  T buffer_[LOCAL_VECTOR_BUFFER_SIZE];$/;"	m	class:limonp::LocalVector
buffer_	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  T buffer_[LOCAL_VECTOR_BUFFER_SIZE];$/;"	m	class:limonp::LocalVector
buildWordsMap	src/WebPage.cpp	/^void WebPage::buildWordsMap(Configuration* conf, SplitTool* jieba)$/;"	f	class:WebPage
calcSimhashValue	src/WebPage.cpp	/^void WebPage::calcSimhashValue(simhash::Simhasher& simhasher)$/;"	f	class:WebPage
callfopen	src/tinyxml2.cpp	/^static FILE* callfopen( const char* filepath, const char* mode )$/;"	f	namespace:tinyxml2
capacity	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  size_t capacity() const {$/;"	f	class:limonp::BoundedBlockingQueue
capacity	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  size_t capacity() const {$/;"	f	class:limonp::LocalVector
capacity	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  size_t capacity() const {$/;"	f	class:limonp::BoundedBlockingQueue
capacity	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  size_t capacity() const {$/;"	f	class:limonp::LocalVector
capacity_	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  const size_t capacity_;$/;"	m	class:limonp::BoundedQueue
capacity_	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  size_t capacity_;$/;"	m	class:limonp::LocalVector
capacity_	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  const size_t capacity_;$/;"	m	class:limonp::BoundedQueue
capacity_	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  size_t capacity_;$/;"	m	class:limonp::LocalVector
circular_buffer_	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  vector<T> circular_buffer_;$/;"	m	class:limonp::BoundedQueue
circular_buffer_	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  vector<T> circular_buffer_;$/;"	m	class:limonp::BoundedQueue
clear	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  void clear() {$/;"	f	class:limonp::LocalVector
clear	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  void clear() {$/;"	f	class:limonp::LocalVector
const_iterator	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  typedef const T* const_iterator ;$/;"	t	class:limonp::LocalVector
const_iterator	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  typedef const T* const_iterator ;$/;"	t	class:limonp::LocalVector
containsUrlEncoding	src/httpserver.cpp	/^bool containsUrlEncoding(const std::string& str) {$/;"	f
context	include/simhash/cppjieba/limonp/Md5.hpp	/^  } context ;$/;"	m	class:limonp::MD5	typeref:struct:limonp::MD5::__context_t
context	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  } context ;$/;"	m	class:limonp::MD5	typeref:struct:limonp::MD5::__context_t
count	include/simhash/cppjieba/limonp/Md5.hpp	/^    UINT4 count[2];        \/* number of bits, modulo 2^64 (lsb first) *\/$/;"	m	struct:limonp::MD5::__context_t
count	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^    UINT4 count[2];        \/* number of bits, modulo 2^64 (lsb first) *\/$/;"	m	struct:limonp::MD5::__context_t
cppjieba	include/simhash/cppjieba/DictTrie.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/FullSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/HMMModel.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/HMMSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/Jieba.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/KeywordExtractor.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/LevelSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/MPSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/MixSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/PosTagger.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/PreFilter.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/QuerySegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/SegmentBase.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/TransCode.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/cppjieba/Trie.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/DictTrie.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/FullSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/HMMModel.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/HMMSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/Jieba.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/LevelSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/MPSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/MixSegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/PosTagger.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/PreFilter.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/QuerySegment.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/SegmentBase.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/TransCode.hpp	/^namespace cppjieba {$/;"	n
cppjieba	include/simhash/deps/cppjieba/Trie.hpp	/^namespace cppjieba {$/;"	n
createInstance	src/Dictionary.cpp	/^Dictionary* Dictionary::createInstance() {$/;"	f	class:Dictionary
create_table	src/Mysql.cpp	/^int Mysql::create_table() {$/;"	f	class:Mysql
cursor_	include/simhash/cppjieba/PreFilter.hpp	/^  Unicode::const_iterator cursor_;$/;"	m	class:cppjieba::PreFilter
cursor_	include/simhash/deps/cppjieba/PreFilter.hpp	/^  Unicode::const_iterator cursor_;$/;"	m	class:cppjieba::PreFilter
cut	src/SplitCppJieba.cpp	/^vector<string> SplitToolCppJieba::cut(const string & sentence)$/;"	f	class:SplitToolCppJieba
decodeAndConvertToChinese	src/httpserver.cpp	/^std::string decodeAndConvertToChinese(const std::string& double_encoded) {$/;"	f
decodeURIComponent	src/httpserver.cpp	/^std::string decodeURIComponent(const std::string& encoded) {$/;"	f
dictTrie_	include/simhash/cppjieba/FullSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::FullSegment
dictTrie_	include/simhash/cppjieba/MPSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::MPSegment
dictTrie_	include/simhash/deps/cppjieba/FullSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::FullSegment
dictTrie_	include/simhash/deps/cppjieba/MPSegment.hpp	/^  const DictTrie* dictTrie_;$/;"	m	class:cppjieba::MPSegment
dict_trie_	include/simhash/cppjieba/Jieba.hpp	/^  DictTrie dict_trie_;$/;"	m	class:cppjieba::Jieba
dict_trie_	include/simhash/deps/cppjieba/Jieba.hpp	/^  DictTrie dict_trie_;$/;"	m	class:cppjieba::Jieba
digestChars	include/simhash/cppjieba/limonp/Md5.hpp	/^  char digestChars[ 33 ] ;$/;"	m	class:limonp::MD5
digestChars	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  char digestChars[ 33 ] ;$/;"	m	class:limonp::MD5
digestFile	include/simhash/cppjieba/limonp/Md5.hpp	/^  const char* digestFile( const char *filename ) {$/;"	f	class:limonp::MD5
digestFile	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  const char* digestFile( const char *filename ) {$/;"	f	class:limonp::MD5
digestMemory	include/simhash/cppjieba/limonp/Md5.hpp	/^  const char* digestMemory( BYTE *memchunk, int len ) {$/;"	f	class:limonp::MD5
digestMemory	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  const char* digestMemory( BYTE *memchunk, int len ) {$/;"	f	class:limonp::MD5
digestRaw	include/simhash/cppjieba/limonp/Md5.hpp	/^  BYTE digestRaw[ 16 ] ;$/;"	m	class:limonp::MD5
digestRaw	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  BYTE digestRaw[ 16 ] ;$/;"	m	class:limonp::MD5
digestString	include/simhash/cppjieba/limonp/Md5.hpp	/^  const char* digestString(const char *string ) {$/;"	f	class:limonp::MD5
digestString	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  const char* digestString(const char *string ) {$/;"	f	class:limonp::MD5
distance	src/KeyRecommander.cpp	/^int distance(const std::string & lhs, const std::string &rhs)$/;"	f
doQuery	src/WebPageQuery.cpp	/^Json WebPageQuery::doQuery(const string& str)$/;"	f	class:WebPageQuery
editDistance	src/KeyRecommander.cpp	/^int editDistance(const std::string & lhs, const std::string &rhs)$/;"	f
emitProbB	include/simhash/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbB;$/;"	m	struct:cppjieba::HMMModel
emitProbB	include/simhash/deps/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbB;$/;"	m	struct:cppjieba::HMMModel
emitProbE	include/simhash/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbE;$/;"	m	struct:cppjieba::HMMModel
emitProbE	include/simhash/deps/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbE;$/;"	m	struct:cppjieba::HMMModel
emitProbM	include/simhash/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbM;$/;"	m	struct:cppjieba::HMMModel
emitProbM	include/simhash/deps/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbM;$/;"	m	struct:cppjieba::HMMModel
emitProbS	include/simhash/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbS;$/;"	m	struct:cppjieba::HMMModel
emitProbS	include/simhash/deps/cppjieba/HMMModel.hpp	/^  EmitProbMap emitProbS;$/;"	m	struct:cppjieba::HMMModel
emitProbVec	include/simhash/cppjieba/HMMModel.hpp	/^  vector<EmitProbMap* > emitProbVec;$/;"	m	struct:cppjieba::HMMModel
emitProbVec	include/simhash/deps/cppjieba/HMMModel.hpp	/^  vector<EmitProbMap* > emitProbVec;$/;"	m	struct:cppjieba::HMMModel
empty	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  bool empty() const {$/;"	f	class:limonp::LocalVector
empty	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  bool empty() const {$/;"	f	class:limonp::LocalVector
end	include/simhash/cppjieba/Jieba.hpp	/^    size_t end;$/;"	m	struct:cppjieba::Jieba::LocWord
end	include/simhash/cppjieba/PreFilter.hpp	/^    Unicode::const_iterator end;$/;"	m	struct:cppjieba::PreFilter::Range
end	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  const_iterator end() const {$/;"	f	class:limonp::LocalVector
end	include/simhash/deps/cppjieba/Jieba.hpp	/^    size_t end;$/;"	m	struct:cppjieba::Jieba::LocWord
end	include/simhash/deps/cppjieba/PreFilter.hpp	/^    Unicode::const_iterator end;$/;"	m	struct:cppjieba::PreFilter::Range
end	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  const_iterator end() const {$/;"	f	class:limonp::LocalVector
entities	src/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
err_	include/simhash/cppjieba/limonp/FileLock.hpp	/^  string err_;$/;"	m	class:limonp::FileLock
err_	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  string err_;$/;"	m	class:limonp::FileLock
execut	src/KeyRecommander.cpp	/^void KeyRecommander::execut() {$/;"	f	class:KeyRecommander
executeQuery	src/WebPageQuery.cpp	/^bool WebPageQuery::executeQuery(const map<string,int>&queryWords,map<int,vector<double>>&resultVec)$/;"	f	class:WebPageQuery
extract	include/simhash/Simhasher.hpp	/^            bool extract(const string& text, vector<pair<string,double> > & res, size_t topN) const$/;"	f	class:simhash::Simhasher
fd_	include/simhash/cppjieba/limonp/FileLock.hpp	/^  int fd_;$/;"	m	class:limonp::FileLock
fd_	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  int fd_;$/;"	m	class:limonp::FileLock
final	include/simhash/jenkins.h	60;"	d
fullSeg_	include/simhash/cppjieba/QuerySegment.hpp	/^  FullSegment fullSeg_;$/;"	m	class:cppjieba::QuerySegment
fullSeg_	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  FullSegment fullSeg_;$/;"	m	class:cppjieba::QuerySegment
full_seg_	include/simhash/cppjieba/Jieba.hpp	/^  FullSegment full_seg_;$/;"	m	class:cppjieba::Jieba
full_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  FullSegment full_seg_;$/;"	m	class:cppjieba::Jieba
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure0
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure1
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure2
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure3
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure0
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure1
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure2
fun_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure3
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure0
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure1
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure2
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::Closure3
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure0
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure1
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure2
fun_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Funct fun_;$/;"	m	class:limonp::ObjClosure3
generateSummary	src/WebPageQuery.cpp	/^std::string WebPageQuery::generateSummary(std::string& content, std::map<std::string, int>& queryWords) {$/;"	f	class:WebPageQuery
getConfigMap	src/Configuration.cpp	/^map<string,string> & Configuration::getConfigMap()$/;"	f	class:Configuration
getDoc	src/WebPage.cpp	/^string WebPage::getDoc()$/;"	f	class:WebPage
getDocContent	src/WebPage.cpp	/^string& WebPage::getDocContent()$/;"	f	class:WebPage
getDocId	src/WebPage.cpp	/^int WebPage::getDocId()$/;"	f	class:WebPage
getDocTitle	src/WebPage.cpp	/^string& WebPage::getDocTitle()$/;"	f	class:WebPage
getDocUrl	src/WebPage.cpp	/^string& WebPage::getDocUrl()$/;"	f	class:WebPage
getIndex	src/Dictionary.cpp	/^map<string,set<int>>& Dictionary::getIndex() {$/;"	f	class:Dictionary
getInstance	src/Configuration.cpp	/^Configuration*  Configuration::getInstance(const string &filepath)$/;"	f	class:Configuration
getInstance	src/WebPageQuery.cpp	/^WebPageQuery*WebPageQuery::getInstance()$/;"	f	class:WebPageQuery
getQueryWeightVector	src/WebPageQuery.cpp	/^vector<double> WebPageQuery::getQueryWeightVector(map<string,int>queryWords) {$/;"	f	class:WebPageQuery
getStopWordList	src/Configuration.cpp	/^ set<string> Configuration::getStopWordList()$/;"	f	class:Configuration
getWordsMap	src/WebPage.cpp	/^unordered_map<string, int>& WebPage::getWordsMap()$/;"	f	class:WebPage
get_cnDict	src/Dictionary.cpp	/^vector<pair<string,int>>& Dictionary::get_cnDict() {$/;"	f	class:Dictionary
get_enDict	src/Dictionary.cpp	/^vector<pair<string,int>>& Dictionary::get_enDict() {$/;"	f	class:Dictionary
get_result	src/KeyRecommander.cpp	/^Json KeyRecommander::get_result() {$/;"	f	class:KeyRecommander
hashlittle2	include/simhash/jenkins.h	/^		void hashlittle2($/;"	f	struct:simhash::jenkins
head_	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  size_t head_;$/;"	m	class:limonp::BoundedQueue
head_	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  size_t head_;$/;"	m	class:limonp::BoundedQueue
hmmSeg_	include/simhash/cppjieba/MixSegment.hpp	/^  HMMSegment hmmSeg_;$/;"	m	class:cppjieba::MixSegment
hmmSeg_	include/simhash/deps/cppjieba/MixSegment.hpp	/^  HMMSegment hmmSeg_;$/;"	m	class:cppjieba::MixSegment
hmm_seg_	include/simhash/cppjieba/Jieba.hpp	/^  HMMSegment hmm_seg_;$/;"	m	class:cppjieba::Jieba
hmm_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  HMMSegment hmm_seg_;$/;"	m	class:cppjieba::Jieba
idfAverage_	include/simhash/cppjieba/KeywordExtractor.hpp	/^  double idfAverage_;$/;"	m	class:cppjieba::KeywordExtractor
idfAverage_	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  double idfAverage_;$/;"	m	class:cppjieba::KeywordExtractor
idfMap_	include/simhash/cppjieba/KeywordExtractor.hpp	/^  unordered_map<string, double> idfMap_;$/;"	m	class:cppjieba::KeywordExtractor
idfMap_	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  unordered_map<string, double> idfMap_;$/;"	m	class:cppjieba::KeywordExtractor
init_	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  void init_() {$/;"	f	class:limonp::LocalVector
init_	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  void init_() {$/;"	f	class:limonp::LocalVector
insert	src/Mysql.cpp	/^int Mysql::insert(const char*sql) {$/;"	f	class:Mysql
isEqual	include/simhash/Simhasher.hpp	/^            static bool isEqual(uint64_t lhs, uint64_t rhs, unsigned short n = 3)$/;"	f	class:simhash::Simhasher
isJoined	include/simhash/cppjieba/limonp/Thread.hpp	/^  bool isJoined;$/;"	m	class:limonp::IThread
isJoined	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  bool isJoined;$/;"	m	class:limonp::IThread
isNeedDestroy_	include/simhash/cppjieba/FullSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::FullSegment
isNeedDestroy_	include/simhash/cppjieba/HMMSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::HMMSegment
isNeedDestroy_	include/simhash/cppjieba/MPSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::MPSegment
isNeedDestroy_	include/simhash/deps/cppjieba/FullSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::FullSegment
isNeedDestroy_	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::HMMSegment
isNeedDestroy_	include/simhash/deps/cppjieba/MPSegment.hpp	/^  bool isNeedDestroy_;$/;"	m	class:cppjieba::MPSegment
isStarted	include/simhash/cppjieba/limonp/Thread.hpp	/^  bool isStarted;$/;"	m	class:limonp::IThread
isStarted	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  bool isStarted;$/;"	m	class:limonp::IThread
itemData	include/tinyxml2.h	/^        char    itemData[static_cast<size_t>(ITEM_SIZE)];$/;"	m	union:tinyxml2::MemPoolT::Item
items	include/tinyxml2.h	/^        Item items[ITEMS_PER_BLOCK];$/;"	m	struct:tinyxml2::MemPoolT::Block
jenkins	include/simhash/jenkins.h	/^	struct jenkins {$/;"	s	namespace:simhash
length	src/KeyRecommander.cpp	/^std::size_t length(const std::string &str)$/;"	f
length	src/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:
level_	include/simhash/cppjieba/limonp/Logging.hpp	/^  size_t level_;$/;"	m	class:limonp::Logger
level_	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  size_t level_;$/;"	m	class:limonp::Logger
level_seg_	include/simhash/cppjieba/Jieba.hpp	/^  LevelSegment level_seg_;$/;"	m	class:cppjieba::Jieba
level_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  LevelSegment level_seg_;$/;"	m	class:cppjieba::Jieba
limonp	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Closure.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Colors.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Condition.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Config.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/FileLock.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/LocalVector.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Logging.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Md5.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/MutexLock.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/NonCopyable.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/StringUtil.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/Thread.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Colors.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Config.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/NonCopyable.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/StringUtil.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^namespace limonp {$/;"	n
limonp	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^namespace limonp {$/;"	n
loadLibrary	src/WebPageQuery.cpp	/^void WebPageQuery::loadLibrary()$/;"	f	class:WebPageQuery
main	src/httpserver.cpp	/^int main()$/;"	f
make	include/simhash/Simhasher.hpp	/^            bool make(const string& text, size_t topN, uint64_t& v64) const$/;"	f	class:simhash::Simhasher
make	include/simhash/Simhasher.hpp	/^            bool make(const string& text, size_t topN, vector<pair<uint64_t, double> >& res) const$/;"	f	class:simhash::Simhasher
make_from_predefined_keywords	include/simhash/Simhasher.hpp	/^            static uint64_t make_from_predefined_keywords(const std::vector< std::pair<std::string, double> >& keywords) {$/;"	f	class:simhash::Simhasher
map_	include/simhash/cppjieba/limonp/Config.hpp	/^  map<string, string> map_;$/;"	m	class:limonp::Config
map_	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  map<string, string> map_;$/;"	m	class:limonp::Config
maxWordLen_	include/simhash/cppjieba/QuerySegment.hpp	/^  size_t maxWordLen_;$/;"	m	class:cppjieba::QuerySegment
maxWordLen_	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  size_t maxWordLen_;$/;"	m	class:cppjieba::QuerySegment
max_weight_	include/simhash/cppjieba/DictTrie.hpp	/^  double max_weight_;$/;"	m	class:cppjieba::DictTrie
max_weight_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  double max_weight_;$/;"	m	class:cppjieba::DictTrie
md5File	include/simhash/cppjieba/limonp/Md5.hpp	/^inline bool md5File(const char* filepath, std::string& res) {$/;"	f	namespace:limonp
md5File	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^inline bool md5File(const char* filepath, std::string& res) {$/;"	f	namespace:limonp
md5String	include/simhash/cppjieba/limonp/Md5.hpp	/^inline bool md5String(const char* str, std::string& res) {$/;"	f	namespace:limonp
md5String	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^inline bool md5String(const char* str, std::string& res) {$/;"	f	namespace:limonp
median_weight_	include/simhash/cppjieba/DictTrie.hpp	/^  double median_weight_;$/;"	m	class:cppjieba::DictTrie
median_weight_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  double median_weight_;$/;"	m	class:cppjieba::DictTrie
min_weight_	include/simhash/cppjieba/DictTrie.hpp	/^  double min_weight_;$/;"	m	class:cppjieba::DictTrie
min_weight_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  double min_weight_;$/;"	m	class:cppjieba::DictTrie
mix	include/simhash/jenkins.h	50;"	d
mixSeg_	include/simhash/cppjieba/QuerySegment.hpp	/^  MixSegment mixSeg_;$/;"	m	class:cppjieba::QuerySegment
mixSeg_	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  MixSegment mixSeg_;$/;"	m	class:cppjieba::QuerySegment
mix_seg_	include/simhash/cppjieba/Jieba.hpp	/^  MixSegment mix_seg_;$/;"	m	class:cppjieba::Jieba
mix_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  MixSegment mix_seg_;$/;"	m	class:cppjieba::Jieba
model_	include/simhash/cppjieba/HMMSegment.hpp	/^  const HMMModel* model_;$/;"	m	class:cppjieba::HMMSegment
model_	include/simhash/cppjieba/Jieba.hpp	/^  HMMModel model_;$/;"	m	class:cppjieba::Jieba
model_	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  const HMMModel* model_;$/;"	m	class:cppjieba::HMMSegment
model_	include/simhash/deps/cppjieba/Jieba.hpp	/^  HMMModel model_;$/;"	m	class:cppjieba::Jieba
mpSeg_	include/simhash/cppjieba/LevelSegment.hpp	/^  MPSegment mpSeg_;$/;"	m	class:cppjieba::LevelSegment
mpSeg_	include/simhash/cppjieba/MixSegment.hpp	/^  MPSegment mpSeg_;$/;"	m	class:cppjieba::MixSegment
mpSeg_	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  MPSegment mpSeg_;$/;"	m	class:cppjieba::LevelSegment
mpSeg_	include/simhash/deps/cppjieba/MixSegment.hpp	/^  MPSegment mpSeg_;$/;"	m	class:cppjieba::MixSegment
mp_seg_	include/simhash/cppjieba/Jieba.hpp	/^  MPSegment mp_seg_;$/;"	m	class:cppjieba::Jieba
mp_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  MPSegment mp_seg_;$/;"	m	class:cppjieba::Jieba
mpss_	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  map<string, string> mpss_;$/;"	m	class:limonp::ArgvContext
mpss_	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  map<string, string> mpss_;$/;"	m	class:limonp::ArgvContext
mutex_	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  mutable MutexLock mutex_;$/;"	m	class:limonp::BlockingQueue
mutex_	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  mutable MutexLock          mutex_;$/;"	m	class:limonp::BoundedBlockingQueue
mutex_	include/simhash/cppjieba/limonp/Condition.hpp	/^  MutexLock& mutex_;$/;"	m	class:limonp::Condition
mutex_	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  MutexLock & mutex_;$/;"	m	class:limonp::MutexLockGuard
mutex_	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  pthread_mutex_t mutex_;$/;"	m	class:limonp::MutexLock
mutex_	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  mutable MutexLock mutex_;$/;"	m	class:limonp::BlockingQueue
mutex_	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  mutable MutexLock          mutex_;$/;"	m	class:limonp::BoundedBlockingQueue
mutex_	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  MutexLock& mutex_;$/;"	m	class:limonp::Condition
mutex_	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  MutexLock & mutex_;$/;"	m	class:limonp::MutexLockGuard
mutex_	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  pthread_mutex_t mutex_;$/;"	m	class:limonp::MutexLock
nBytesCode	src/KeyRecommander.cpp	/^size_t nBytesCode(const char ch)$/;"	f
nBytesCode	src/WebPageQuery.cpp	/^size_t WebPageQuery::nBytesCode(const char ch) {$/;"	f	class:WebPageQuery
next	include/simhash/cppjieba/Trie.hpp	/^  NextMap *next;$/;"	m	class:cppjieba::TrieNode
next	include/simhash/deps/cppjieba/Trie.hpp	/^  NextMap *next;$/;"	m	class:cppjieba::TrieNode
next	include/tinyxml2.h	/^        Item*   next;$/;"	m	union:tinyxml2::MemPoolT::Item
nextPos	include/simhash/cppjieba/Trie.hpp	/^  size_t nextPos;$/;"	m	struct:cppjieba::Dag
nextPos	include/simhash/deps/cppjieba/Trie.hpp	/^  size_t nextPos;$/;"	m	struct:cppjieba::Dag
nexts	include/simhash/cppjieba/Trie.hpp	/^  LocalVector<pair<size_t, const DictUnit*> > nexts;$/;"	m	struct:cppjieba::Dag
nexts	include/simhash/deps/cppjieba/Trie.hpp	/^  LocalVector<pair<size_t, const DictUnit*> > nexts;$/;"	m	struct:cppjieba::Dag
notEmpty_	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  Condition         notEmpty_;$/;"	m	class:limonp::BlockingQueue
notEmpty_	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  Condition                  notEmpty_;$/;"	m	class:limonp::BoundedBlockingQueue
notEmpty_	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  Condition         notEmpty_;$/;"	m	class:limonp::BlockingQueue
notEmpty_	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  Condition                  notEmpty_;$/;"	m	class:limonp::BoundedBlockingQueue
notFull_	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  Condition                  notFull_;$/;"	m	class:limonp::BoundedBlockingQueue
notFull_	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  Condition                  notFull_;$/;"	m	class:limonp::BoundedBlockingQueue
ok_	include/simhash/cppjieba/limonp/FileLock.hpp	/^  bool ok_;$/;"	m	class:limonp::FileLock
ok_	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  bool ok_;$/;"	m	class:limonp::FileLock
operator ()	include/KeyRecommander.h	/^        bool operator()(const string& lhs, const string& rhs) const$/;"	f	struct:KeyRecommander::CompareByDistance
operator ()	include/simhash/jenkins.h	/^		uint64_t operator()(const char* data, size_t len, uint64_t s) const {$/;"	f	struct:simhash::jenkins
operator <<	include/simhash/cppjieba/Trie.hpp	/^inline ostream & operator << (ostream& os, const DictUnit& unit) {$/;"	f	namespace:cppjieba
operator <<	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^inline ostream& operator << (ostream& os, const ArgvContext& args) {$/;"	f	namespace:limonp
operator <<	include/simhash/cppjieba/limonp/Config.hpp	/^inline ostream& operator << (ostream& os, const Config& config) {$/;"	f	namespace:limonp
operator <<	include/simhash/cppjieba/limonp/LocalVector.hpp	/^ostream & operator << (ostream& os, const LocalVector<T>& vec) {$/;"	f	namespace:limonp
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^basic_string<T> & operator << (basic_string<T> & s, ifstream & ifs) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^inline ostream& operator << (ostream& os, const vector<string>& v) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ofstream & operator << (ofstream & ofs, const basic_string<T>& s) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const deque<T>& dq) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const map<T1, T2>& mp) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const pair<T1, T2>& pr) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const set<T>& st) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const std::unordered_map<T1, T2>& mp) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const vector<T>& v) {$/;"	f	namespace:std
operator <<	include/simhash/cppjieba/limonp/StdExtension.hpp	/^string& operator << (string& str, const T& obj) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/Trie.hpp	/^inline ostream & operator << (ostream& os, const DictUnit& unit) {$/;"	f	namespace:cppjieba
operator <<	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^inline ostream& operator << (ostream& os, const ArgvContext& args) {$/;"	f	namespace:limonp
operator <<	include/simhash/deps/cppjieba/limonp/Config.hpp	/^inline ostream& operator << (ostream& os, const Config& config) {$/;"	f	namespace:limonp
operator <<	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^ostream & operator << (ostream& os, const LocalVector<T>& vec) {$/;"	f	namespace:limonp
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^basic_string<T> & operator << (basic_string<T> & s, ifstream & ifs) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^inline ostream& operator << (ostream& os, const vector<string>& v) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ofstream & operator << (ofstream & ofs, const basic_string<T>& s) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const deque<T>& dq) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const map<T1, T2>& mp) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const pair<T1, T2>& pr) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const set<T>& st) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const std::unordered_map<T1, T2>& mp) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^ostream& operator << (ostream& os, const vector<T>& v) {$/;"	f	namespace:std
operator <<	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^string& operator << (string& str, const T& obj) {$/;"	f	namespace:std
operator =	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  LocalVector<T>& operator = (const LocalVector<T>& vec) {$/;"	f	class:limonp::LocalVector
operator =	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  LocalVector<T>& operator = (const LocalVector<T>& vec) {$/;"	f	class:limonp::LocalVector
operator =	include/tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle
operator =	include/tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle
operator ==	src/WebPage.cpp	/^bool operator==(const WebPage &lhs, const WebPage &rhs)$/;"	f
operator []	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  string operator [](const string& key) const {$/;"	f	class:limonp::ArgvContext
operator []	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  string operator [](size_t i) const {$/;"	f	class:limonp::ArgvContext
operator []	include/simhash/cppjieba/limonp/Config.hpp	/^  const char* operator [] (const char* key) const {$/;"	f	class:limonp::Config
operator []	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  T& operator [] (size_t i) {$/;"	f	class:limonp::LocalVector
operator []	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  const T& operator [] (size_t i) const {$/;"	f	class:limonp::LocalVector
operator []	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  string operator [](const string& key) const {$/;"	f	class:limonp::ArgvContext
operator []	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  string operator [](size_t i) const {$/;"	f	class:limonp::ArgvContext
operator []	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  const char* operator [] (const char* key) const {$/;"	f	class:limonp::Config
operator []	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  T& operator [] (size_t i) {$/;"	f	class:limonp::LocalVector
operator []	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  const T& operator [] (size_t i) const {$/;"	f	class:limonp::LocalVector
operator []	include/tinyxml2.h	/^    T& operator[](size_t i) {$/;"	f	class:tinyxml2::DynArray
operator []	include/tinyxml2.h	/^    const T& operator[](size_t i) const {$/;"	f	class:tinyxml2::DynArray
operator bool	include/simhash/cppjieba/limonp/Config.hpp	/^  operator bool () {$/;"	f	class:limonp::Config
operator bool	include/simhash/deps/cppjieba/limonp/Config.hpp	/^  operator bool () {$/;"	f	class:limonp::Config
override	include/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr ) override;$/;"	m	class:tinyxml2::XMLDeclaration
override	include/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr ) override;$/;"	m	class:tinyxml2::XMLElement
override	include/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr ) override;$/;"	m	class:tinyxml2::XMLText
override	include/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr ) override;$/;"	m	class:tinyxml2::XMLUnknown
override	include/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* parentEndTag, int* curLineNumPtr) override;$/;"	m	class:tinyxml2::XMLComment
override	include/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const override;$/;"	m	class:tinyxml2::XMLComment
override	include/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const override;$/;"	m	class:tinyxml2::XMLDeclaration
override	include/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const override;$/;"	m	class:tinyxml2::XMLElement
override	include/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const override;$/;"	m	class:tinyxml2::XMLText
override	include/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const override;$/;"	m	class:tinyxml2::XMLUnknown
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLComment
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLDeclaration
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLDocument
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLElement
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLText
override	include/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const override;$/;"	m	class:tinyxml2::XMLUnknown
override	include/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const override;$/;"	m	class:tinyxml2::XMLComment
override	include/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const override;$/;"	m	class:tinyxml2::XMLDeclaration
override	include/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const override;$/;"	m	class:tinyxml2::XMLElement
override	include/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const override;$/;"	m	class:tinyxml2::XMLText
override	include/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const override;$/;"	m	class:tinyxml2::XMLUnknown
override	include/tinyxml2.h	/^    virtual bool Visit( const XMLComment& comment ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& declaration ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool Visit( const XMLText& text ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& unknown ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute ) override;$/;"	m	class:tinyxml2::XMLPrinter
override	include/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& element ) override;$/;"	m	class:tinyxml2::XMLPrinter
pInfo	include/simhash/cppjieba/Trie.hpp	/^  const DictUnit * pInfo;$/;"	m	struct:cppjieba::Dag
pInfo	include/simhash/deps/cppjieba/Trie.hpp	/^  const DictUnit * pInfo;$/;"	m	struct:cppjieba::Dag
p_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure0
p_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure1
p_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure2
p_	include/simhash/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure3
p_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure0
p_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure1
p_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure2
p_	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  Obj* p_;$/;"	m	class:limonp::ObjClosure3
pattern	src/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:
pcond_	include/simhash/cppjieba/limonp/Condition.hpp	/^  pthread_cond_t pcond_;$/;"	m	class:limonp::Condition
pcond_	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  pthread_cond_t pcond_;$/;"	m	class:limonp::Condition
pos_tagger_	include/simhash/cppjieba/Jieba.hpp	/^  PosTagger pos_tagger_;$/;"	m	class:cppjieba::Jieba
pos_tagger_	include/simhash/deps/cppjieba/Jieba.hpp	/^  PosTagger pos_tagger_;$/;"	m	class:cppjieba::Jieba
private	include/simhash/cppjieba/limonp/ForcePublic.hpp	4;"	d
private	include/simhash/deps/cppjieba/limonp/ForcePublic.hpp	4;"	d
protected	include/simhash/cppjieba/limonp/ForcePublic.hpp	5;"	d
protected	include/simhash/deps/cppjieba/limonp/ForcePublic.hpp	5;"	d
ptThreadPool_	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^    ThreadPool * ptThreadPool_;$/;"	m	class:limonp::ThreadPool::Worker
ptThreadPool_	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^    ThreadPool * ptThreadPool_;$/;"	m	class:limonp::ThreadPool::Worker
ptValue	include/simhash/cppjieba/Trie.hpp	/^  const DictUnit *ptValue;$/;"	m	class:cppjieba::TrieNode
ptValue	include/simhash/deps/cppjieba/Trie.hpp	/^  const DictUnit *ptValue;$/;"	m	class:cppjieba::TrieNode
ptr_	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  T * ptr_;$/;"	m	class:limonp::LocalVector
ptr_	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  T * ptr_;$/;"	m	class:limonp::LocalVector
push_back	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  void push_back(const T& t) {$/;"	f	class:limonp::LocalVector
push_back	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  void push_back(const T& t) {$/;"	f	class:limonp::LocalVector
put_configMap	src/Configuration.cpp	/^void Configuration::put_configMap()$/;"	f	class:Configuration
put_stopWordList	src/Configuration.cpp	/^void Configuration::put_stopWordList()$/;"	f	class:Configuration
query	src/Mysql.cpp	/^result Mysql::query(const char* sql) {$/;"	f	class:Mysql
queryIndexTable	src/KeyRecommander.cpp	/^void KeyRecommander::queryIndexTable()$/;"	f	class:KeyRecommander
query_seg_	include/simhash/cppjieba/Jieba.hpp	/^  QuerySegment query_seg_;$/;"	m	class:cppjieba::Jieba
query_seg_	include/simhash/deps/cppjieba/Jieba.hpp	/^  QuerySegment query_seg_;$/;"	m	class:cppjieba::Jieba
queue_	include/simhash/cppjieba/limonp/BlockingQueue.hpp	/^  std::queue<T>     queue_;$/;"	m	class:limonp::BlockingQueue
queue_	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  BoundedQueue<T>  queue_;$/;"	m	class:limonp::BoundedBlockingQueue
queue_	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  BoundedBlockingQueue<ClosureInterface*> queue_;$/;"	m	class:limonp::ThreadPool
queue_	include/simhash/deps/cppjieba/limonp/BlockingQueue.hpp	/^  std::queue<T>     queue_;$/;"	m	class:limonp::BlockingQueue
queue_	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  BoundedQueue<T>  queue_;$/;"	m	class:limonp::BoundedBlockingQueue
queue_	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  BoundedBlockingQueue<ClosureInterface*> queue_;$/;"	m	class:limonp::ThreadPool
readDict	src/Dictionary.cpp	/^void Dictionary::readDict(const string& dict_path,vector<pair<string,int>>& dict) {$/;"	f	class:Dictionary
readIndex	src/Dictionary.cpp	/^void Dictionary::readIndex(const string & index_path,map<string,set<int>>& index_table)$/;"	f	class:Dictionary
reserve	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  void reserve(size_t size) {$/;"	f	class:limonp::LocalVector
reserve	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  void reserve(size_t size) {$/;"	f	class:limonp::LocalVector
root_	include/simhash/cppjieba/Trie.hpp	/^  TrieNode* root_;$/;"	m	class:cppjieba::Trie
root_	include/simhash/deps/cppjieba/Trie.hpp	/^  TrieNode* root_;$/;"	m	class:cppjieba::Trie
rot	include/simhash/jenkins.h	48;"	d
rune	include/simhash/cppjieba/Trie.hpp	/^  Rune rune;$/;"	m	struct:cppjieba::Dag
rune	include/simhash/deps/cppjieba/Trie.hpp	/^  Rune rune;$/;"	m	struct:cppjieba::Dag
segment_	include/simhash/cppjieba/KeywordExtractor.hpp	/^  MixSegment segment_;$/;"	m	class:cppjieba::KeywordExtractor
segment_	include/simhash/cppjieba/PosTagger.hpp	/^  MixSegment segment_;$/;"	m	class:cppjieba::PosTagger
segment_	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  MixSegment segment_;$/;"	m	class:cppjieba::KeywordExtractor
segment_	include/simhash/deps/cppjieba/PosTagger.hpp	/^  MixSegment segment_;$/;"	m	class:cppjieba::PosTagger
sentence_	include/simhash/cppjieba/PreFilter.hpp	/^  Unicode sentence_;$/;"	m	class:cppjieba::PreFilter
sentence_	include/simhash/deps/cppjieba/PreFilter.hpp	/^  Unicode sentence_;$/;"	m	class:cppjieba::PreFilter
setAll	src/WebPage.cpp	/^void WebPage::setAll(int id, string url, string title, string content)$/;"	f	class:WebPage
setNewId	src/WebPage.cpp	/^void WebPage::setNewId(int id)$/;"	f	class:WebPage
sighandler	src/httpserver.cpp	/^void sighandler(int signum)$/;"	f
simhash	include/simhash/Simhasher.hpp	/^namespace simhash$/;"	n
simhash	include/simhash/jenkins.h	/^namespace simhash {$/;"	n
size	include/simhash/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  size_t size() const {$/;"	f	class:limonp::BoundedBlockingQueue
size	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  size_t size() const {$/;"	f	class:limonp::LocalVector
size	include/simhash/deps/cppjieba/limonp/BoundedBlockingQueue.hpp	/^  size_t size() const {$/;"	f	class:limonp::BoundedBlockingQueue
size	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  size_t size() const {$/;"	f	class:limonp::LocalVector
size_	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  size_t size_;$/;"	m	class:limonp::BoundedQueue
size_	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  size_t size_;$/;"	m	class:limonp::LocalVector
size_	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  size_t size_;$/;"	m	class:limonp::BoundedQueue
size_	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  size_t size_;$/;"	m	class:limonp::LocalVector
size_type	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  typedef size_t size_type;$/;"	t	class:limonp::LocalVector
size_type	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  typedef size_t size_type;$/;"	t	class:limonp::LocalVector
sset_	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  set<string> sset_;$/;"	m	class:limonp::ArgvContext
sset_	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  set<string> sset_;$/;"	m	class:limonp::ArgvContext
startProb	include/simhash/cppjieba/HMMModel.hpp	/^  double startProb[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
startProb	include/simhash/deps/cppjieba/HMMModel.hpp	/^  double startProb[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
statMap	include/simhash/cppjieba/HMMModel.hpp	/^  char statMap[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
statMap	include/simhash/deps/cppjieba/HMMModel.hpp	/^  char statMap[STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
state	include/simhash/cppjieba/limonp/Md5.hpp	/^    UINT4 state[4];                                   \/* state (ABCD) *\/$/;"	m	struct:limonp::MD5::__context_t
state	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^    UINT4 state[4];                                   \/* state (ABCD) *\/$/;"	m	struct:limonp::MD5::__context_t
static_node_infos_	include/simhash/cppjieba/DictTrie.hpp	/^  vector<DictUnit> static_node_infos_;$/;"	m	class:cppjieba::DictTrie
static_node_infos_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  vector<DictUnit> static_node_infos_;$/;"	m	class:cppjieba::DictTrie
statistic	src/KeyRecommander.cpp	/^void KeyRecommander::statistic(set<int>& iset) {$/;"	f	class:KeyRecommander
std	include/simhash/cppjieba/limonp/StdExtension.hpp	/^namespace std {$/;"	n
std	include/simhash/deps/cppjieba/limonp/StdExtension.hpp	/^namespace std {$/;"	n
stopWords_	include/simhash/cppjieba/KeywordExtractor.hpp	/^  unordered_set<string> stopWords_;$/;"	m	class:cppjieba::KeywordExtractor
stopWords_	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  unordered_set<string> stopWords_;$/;"	m	class:cppjieba::KeywordExtractor
stream_	include/simhash/cppjieba/limonp/Logging.hpp	/^  std::ostringstream stream_;$/;"	m	class:limonp::Logger
stream_	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  std::ostringstream stream_;$/;"	m	class:limonp::Logger
symbols_	include/simhash/cppjieba/PreFilter.hpp	/^  const unordered_set<Rune>& symbols_;$/;"	m	class:cppjieba::PreFilter
symbols_	include/simhash/cppjieba/SegmentBase.hpp	/^  unordered_set<Rune> symbols_;$/;"	m	class:cppjieba::SegmentBase
symbols_	include/simhash/deps/cppjieba/PreFilter.hpp	/^  const unordered_set<Rune>& symbols_;$/;"	m	class:cppjieba::PreFilter
symbols_	include/simhash/deps/cppjieba/SegmentBase.hpp	/^  unordered_set<Rune> symbols_;$/;"	m	class:cppjieba::SegmentBase
tag	include/simhash/cppjieba/Trie.hpp	/^  string tag;$/;"	m	struct:cppjieba::DictUnit
tag	include/simhash/deps/cppjieba/Trie.hpp	/^  string tag;$/;"	m	struct:cppjieba::DictUnit
tail_	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  size_t tail_;$/;"	m	class:limonp::BoundedQueue
tail_	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  size_t tail_;$/;"	m	class:limonp::BoundedQueue
thread_	include/simhash/cppjieba/limonp/Thread.hpp	/^  pthread_t thread_;$/;"	m	class:limonp::IThread
thread_	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  pthread_t thread_;$/;"	m	class:limonp::IThread
threads_	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  vector<IThread*> threads_;$/;"	m	class:limonp::ThreadPool
threads_	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  vector<IThread*> threads_;$/;"	m	class:limonp::ThreadPool
tinyxml2	include/tinyxml2.h	/^namespace tinyxml2$/;"	n
tinyxml2	src/tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
toBinaryString	include/simhash/Simhasher.hpp	/^            static void toBinaryString(uint64_t req, string& res)$/;"	f	class:simhash::Simhasher
transProb	include/simhash/cppjieba/HMMModel.hpp	/^  double transProb[STATUS_SUM][STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
transProb	include/simhash/deps/cppjieba/HMMModel.hpp	/^  double transProb[STATUS_SUM][STATUS_SUM];$/;"	m	struct:cppjieba::HMMModel
trie_	include/simhash/cppjieba/DictTrie.hpp	/^  Trie * trie_;$/;"	m	class:cppjieba::DictTrie
trie_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  Trie * trie_;$/;"	m	class:cppjieba::DictTrie
triple_min	src/KeyRecommander.cpp	/^int triple_min(const int &a, const int &b, const int &c)$/;"	f
user_dict_single_chinese_word_	include/simhash/cppjieba/DictTrie.hpp	/^  unordered_set<Rune> user_dict_single_chinese_word_;$/;"	m	class:cppjieba::DictTrie
user_dict_single_chinese_word_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  unordered_set<Rune> user_dict_single_chinese_word_;$/;"	m	class:cppjieba::DictTrie
user_word_default_weight_	include/simhash/cppjieba/DictTrie.hpp	/^  double user_word_default_weight_;$/;"	m	class:cppjieba::DictTrie
user_word_default_weight_	include/simhash/deps/cppjieba/DictTrie.hpp	/^  double user_word_default_weight_;$/;"	m	class:cppjieba::DictTrie
value	src/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:
value_type	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  typedef T value_type;$/;"	t	class:limonp::LocalVector
value_type	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  typedef T value_type;$/;"	t	class:limonp::LocalVector
weight	include/simhash/cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::Dag
weight	include/simhash/cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::DictUnit
weight	include/simhash/deps/cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::Dag
weight	include/simhash/deps/cppjieba/Trie.hpp	/^  double weight;$/;"	m	struct:cppjieba::DictUnit
word	include/simhash/cppjieba/Jieba.hpp	/^    string word;$/;"	m	struct:cppjieba::Jieba::LocWord
word	include/simhash/cppjieba/Trie.hpp	/^  Unicode word;$/;"	m	struct:cppjieba::DictUnit
word	include/simhash/deps/cppjieba/Jieba.hpp	/^    string word;$/;"	m	struct:cppjieba::Jieba::LocWord
word	include/simhash/deps/cppjieba/Trie.hpp	/^  Unicode word;$/;"	m	struct:cppjieba::DictUnit
writeBoolFalse	include/tinyxml2.h	/^	static const char* writeBoolFalse;$/;"	m	class:tinyxml2::XMLUtil
writeBoolFalse	src/tinyxml2.cpp	/^const char* XMLUtil::writeBoolFalse = "false";$/;"	m	class:tinyxml2::XMLUtil	file:
writeBoolTrue	include/tinyxml2.h	/^	static const char* writeBoolTrue;$/;"	m	class:tinyxml2::XMLUtil
writeBoolTrue	src/tinyxml2.cpp	/^const char* XMLUtil::writeBoolTrue  = "true";$/;"	m	class:tinyxml2::XMLUtil	file:
writeToString	include/simhash/cppjieba/limonp/Md5.hpp	/^  void writeToString() {$/;"	f	class:limonp::MD5
writeToString	include/simhash/deps/cppjieba/limonp/Md5.hpp	/^  void writeToString() {$/;"	f	class:limonp::MD5
~ArgvContext	include/simhash/cppjieba/limonp/ArgvContext.hpp	/^  ~ArgvContext() {$/;"	f	class:limonp::ArgvContext
~ArgvContext	include/simhash/deps/cppjieba/limonp/ArgvContext.hpp	/^  ~ArgvContext() {$/;"	f	class:limonp::ArgvContext
~AutoRelease	include/WebPageQuery.h	/^        ~AutoRelease(){$/;"	f	class:WebPageQuery::AutoRelease
~BoundedQueue	include/simhash/cppjieba/limonp/BoundedQueue.hpp	/^  ~BoundedQueue() {$/;"	f	class:limonp::BoundedQueue
~BoundedQueue	include/simhash/deps/cppjieba/limonp/BoundedQueue.hpp	/^  ~BoundedQueue() {$/;"	f	class:limonp::BoundedQueue
~Closure0	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure0() {$/;"	f	class:limonp::Closure0
~Closure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure0() {$/;"	f	class:limonp::Closure0
~Closure1	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure1() {$/;"	f	class:limonp::Closure1
~Closure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure1() {$/;"	f	class:limonp::Closure1
~Closure2	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure2() {$/;"	f	class:limonp::Closure2
~Closure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure2() {$/;"	f	class:limonp::Closure2
~Closure3	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure3() {$/;"	f	class:limonp::Closure3
~Closure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~Closure3() {$/;"	f	class:limonp::Closure3
~ClosureInterface	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~ClosureInterface() {$/;"	f	class:limonp::ClosureInterface
~ClosureInterface	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~ClosureInterface() {$/;"	f	class:limonp::ClosureInterface
~Condition	include/simhash/cppjieba/limonp/Condition.hpp	/^  ~Condition() {$/;"	f	class:limonp::Condition
~Condition	include/simhash/deps/cppjieba/limonp/Condition.hpp	/^  ~Condition() {$/;"	f	class:limonp::Condition
~DepthTracker	include/tinyxml2.h	/^		~DepthTracker() {$/;"	f	class:tinyxml2::XMLDocument::DepthTracker
~DictTrie	include/simhash/cppjieba/DictTrie.hpp	/^  ~DictTrie() {$/;"	f	class:cppjieba::DictTrie
~DictTrie	include/simhash/deps/cppjieba/DictTrie.hpp	/^  ~DictTrie() {$/;"	f	class:cppjieba::DictTrie
~DynArray	include/tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray
~FileLock	include/simhash/cppjieba/limonp/FileLock.hpp	/^  ~FileLock() {$/;"	f	class:limonp::FileLock
~FileLock	include/simhash/deps/cppjieba/limonp/FileLock.hpp	/^  ~FileLock() {$/;"	f	class:limonp::FileLock
~FullSegment	include/simhash/cppjieba/FullSegment.hpp	/^  ~FullSegment() {$/;"	f	class:cppjieba::FullSegment
~FullSegment	include/simhash/deps/cppjieba/FullSegment.hpp	/^  ~FullSegment() {$/;"	f	class:cppjieba::FullSegment
~HMMModel	include/simhash/cppjieba/HMMModel.hpp	/^  ~HMMModel() {$/;"	f	struct:cppjieba::HMMModel
~HMMModel	include/simhash/deps/cppjieba/HMMModel.hpp	/^  ~HMMModel() {$/;"	f	struct:cppjieba::HMMModel
~HMMSegment	include/simhash/cppjieba/HMMSegment.hpp	/^  ~HMMSegment() {$/;"	f	class:cppjieba::HMMSegment
~HMMSegment	include/simhash/deps/cppjieba/HMMSegment.hpp	/^  ~HMMSegment() {$/;"	f	class:cppjieba::HMMSegment
~IThread	include/simhash/cppjieba/limonp/Thread.hpp	/^  virtual ~IThread() {$/;"	f	class:limonp::IThread
~IThread	include/simhash/deps/cppjieba/limonp/Thread.hpp	/^  virtual ~IThread() {$/;"	f	class:limonp::IThread
~Jieba	include/simhash/cppjieba/Jieba.hpp	/^  ~Jieba() {$/;"	f	class:cppjieba::Jieba
~Jieba	include/simhash/deps/cppjieba/Jieba.hpp	/^  ~Jieba() {$/;"	f	class:cppjieba::Jieba
~KeywordExtractor	include/simhash/cppjieba/KeywordExtractor.hpp	/^  ~KeywordExtractor() {$/;"	f	class:cppjieba::KeywordExtractor
~KeywordExtractor	include/simhash/deps/cppjieba/KeywordExtractor.hpp	/^  ~KeywordExtractor() {$/;"	f	class:cppjieba::KeywordExtractor
~LevelSegment	include/simhash/cppjieba/LevelSegment.hpp	/^  ~LevelSegment() {$/;"	f	class:cppjieba::LevelSegment
~LevelSegment	include/simhash/deps/cppjieba/LevelSegment.hpp	/^  ~LevelSegment() {$/;"	f	class:cppjieba::LevelSegment
~LocalVector	include/simhash/cppjieba/limonp/LocalVector.hpp	/^  ~LocalVector() {$/;"	f	class:limonp::LocalVector
~LocalVector	include/simhash/deps/cppjieba/limonp/LocalVector.hpp	/^  ~LocalVector() {$/;"	f	class:limonp::LocalVector
~Logger	include/simhash/cppjieba/limonp/Logging.hpp	/^  ~Logger() {$/;"	f	class:limonp::Logger
~Logger	include/simhash/deps/cppjieba/limonp/Logging.hpp	/^  ~Logger() {$/;"	f	class:limonp::Logger
~MPSegment	include/simhash/cppjieba/MPSegment.hpp	/^  ~MPSegment() {$/;"	f	class:cppjieba::MPSegment
~MPSegment	include/simhash/deps/cppjieba/MPSegment.hpp	/^  ~MPSegment() {$/;"	f	class:cppjieba::MPSegment
~MemPool	include/tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool
~MemPoolT	include/tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT
~MixSegment	include/simhash/cppjieba/MixSegment.hpp	/^  ~MixSegment() {$/;"	f	class:cppjieba::MixSegment
~MixSegment	include/simhash/deps/cppjieba/MixSegment.hpp	/^  ~MixSegment() {$/;"	f	class:cppjieba::MixSegment
~MutexLock	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  ~MutexLock() {$/;"	f	class:limonp::MutexLock
~MutexLock	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  ~MutexLock() {$/;"	f	class:limonp::MutexLock
~MutexLockGuard	include/simhash/cppjieba/limonp/MutexLock.hpp	/^  ~MutexLockGuard() {$/;"	f	class:limonp::MutexLockGuard
~MutexLockGuard	include/simhash/deps/cppjieba/limonp/MutexLock.hpp	/^  ~MutexLockGuard() {$/;"	f	class:limonp::MutexLockGuard
~Mysql	src/Mysql.cpp	/^ Mysql::~Mysql() {$/;"	f	class:Mysql
~NonCopyable	include/simhash/cppjieba/limonp/NonCopyable.hpp	/^  ~NonCopyable() {$/;"	f	class:limonp::NonCopyable
~NonCopyable	include/simhash/deps/cppjieba/limonp/NonCopyable.hpp	/^  ~NonCopyable() {$/;"	f	class:limonp::NonCopyable
~ObjClosure0	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure0() {$/;"	f	class:limonp::ObjClosure0
~ObjClosure0	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure0() {$/;"	f	class:limonp::ObjClosure0
~ObjClosure1	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure1() {$/;"	f	class:limonp::ObjClosure1
~ObjClosure1	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure1() {$/;"	f	class:limonp::ObjClosure1
~ObjClosure2	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure2() {$/;"	f	class:limonp::ObjClosure2
~ObjClosure2	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure2() {$/;"	f	class:limonp::ObjClosure2
~ObjClosure3	include/simhash/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure3() {$/;"	f	class:limonp::ObjClosure3
~ObjClosure3	include/simhash/deps/cppjieba/limonp/Closure.hpp	/^  virtual ~ObjClosure3() {$/;"	f	class:limonp::ObjClosure3
~PosTagger	include/simhash/cppjieba/PosTagger.hpp	/^  ~PosTagger() {$/;"	f	class:cppjieba::PosTagger
~PosTagger	include/simhash/deps/cppjieba/PosTagger.hpp	/^  ~PosTagger() {$/;"	f	class:cppjieba::PosTagger
~PreFilter	include/simhash/cppjieba/PreFilter.hpp	/^  ~PreFilter() {$/;"	f	class:cppjieba::PreFilter
~PreFilter	include/simhash/deps/cppjieba/PreFilter.hpp	/^  ~PreFilter() {$/;"	f	class:cppjieba::PreFilter
~QuerySegment	include/simhash/cppjieba/QuerySegment.hpp	/^  ~QuerySegment() {$/;"	f	class:cppjieba::QuerySegment
~QuerySegment	include/simhash/deps/cppjieba/QuerySegment.hpp	/^  ~QuerySegment() {$/;"	f	class:cppjieba::QuerySegment
~SegmentBase	include/simhash/cppjieba/SegmentBase.hpp	/^  ~SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
~SegmentBase	include/simhash/deps/cppjieba/SegmentBase.hpp	/^  ~SegmentBase() {$/;"	f	class:cppjieba::SegmentBase
~Simhasher	include/simhash/Simhasher.hpp	/^            ~Simhasher(){};$/;"	f	class:simhash::Simhasher
~SplitTool	include/SplitTool.h	/^    virtual ~SplitTool(){};$/;"	f	class:SplitTool
~SplitToolCppJieba	include/SplitCppJieba.h	/^    ~SplitToolCppJieba(){};$/;"	f	class:SplitToolCppJieba
~StrPair	src/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair
~ThreadPool	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^  ~ThreadPool() {$/;"	f	class:limonp::ThreadPool
~ThreadPool	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^  ~ThreadPool() {$/;"	f	class:limonp::ThreadPool
~Trie	include/simhash/cppjieba/Trie.hpp	/^  ~Trie() {$/;"	f	class:cppjieba::Trie
~Trie	include/simhash/deps/cppjieba/Trie.hpp	/^  ~Trie() {$/;"	f	class:cppjieba::Trie
~WebPage	include/WebPage.h	/^    ~WebPage(){};$/;"	f	class:WebPage
~WebPageQuery	src/WebPageQuery.cpp	/^WebPageQuery::~WebPageQuery() {}$/;"	f	class:WebPageQuery
~Worker	include/simhash/cppjieba/limonp/ThreadPool.hpp	/^    virtual ~Worker() {$/;"	f	class:limonp::ThreadPool::Worker
~Worker	include/simhash/deps/cppjieba/limonp/ThreadPool.hpp	/^    virtual ~Worker() {$/;"	f	class:limonp::ThreadPool::Worker
~XMLAttribute	include/tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute
~XMLComment	src/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment
~XMLDeclaration	src/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration
~XMLDocument	src/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument
~XMLElement	src/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement
~XMLNode	src/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode
~XMLPrinter	include/tinyxml2.h	/^    virtual ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter
~XMLText	include/tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText
~XMLUnknown	src/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown
~XMLVisitor	include/tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor
